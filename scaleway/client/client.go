// Package ScalewayDns provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package ScalewayDns

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/pkg/errors"
)

// GoogleProtobufBoolValue defines model for google.protobuf.BoolValue.
type GoogleProtobufBoolValue bool

// GoogleProtobufStringValue defines model for google.protobuf.StringValue.
type GoogleProtobufStringValue string

// GoogleProtobufTimestamp defines model for google.protobuf.Timestamp.
type GoogleProtobufTimestamp time.Time

// ScalewayDomainV2alpha2Civility defines model for scaleway.domain.v2alpha2.Civility.
type ScalewayDomainV2alpha2Civility string

// List of ScalewayDomainV2alpha2Civility
const (
	ScalewayDomainV2alpha2Civility_civility_unknown ScalewayDomainV2alpha2Civility = "civility_unknown"
	ScalewayDomainV2alpha2Civility_m                ScalewayDomainV2alpha2Civility = "m"
	ScalewayDomainV2alpha2Civility_mme              ScalewayDomainV2alpha2Civility = "mme"
)

// ScalewayDomainV2alpha2ClearDNSZoneRecordsResponse defines model for scaleway.domain.v2alpha2.ClearDNSZoneRecordsResponse.
type ScalewayDomainV2alpha2ClearDNSZoneRecordsResponse map[string]interface{}

// ScalewayDomainV2alpha2Contact defines model for scaleway.domain.v2alpha2.Contact.
type ScalewayDomainV2alpha2Contact struct {
	Address1    *string                                   `json:"address1,omitempty"`
	Address2    *string                                   `json:"address2,omitempty"`
	Answer1     *string                                   `json:"answer1,omitempty"`
	Answer2     *string                                   `json:"answer2,omitempty"`
	Answer3     *string                                   `json:"answer3,omitempty"`
	Answer4     *string                                   `json:"answer4,omitempty"`
	Answer5     *string                                   `json:"answer5,omitempty"`
	City        *string                                   `json:"city,omitempty"`
	Civility    *ScalewayDomainV2alpha2Civility           `json:"civility,omitempty"`
	CompanyName *string                                   `json:"company_name,omitempty"`
	Country     *string                                   `json:"country,omitempty"`
	Email       *string                                   `json:"email,omitempty"`
	EmailAlt    *string                                   `json:"email_alt,omitempty"`
	EmailStatus *ScalewayDomainV2alpha2ContactEmailStatus `json:"email_status,omitempty"`
	ExtensionEu *ScalewayDomainV2alpha2ExtensionEU        `json:"extension_eu,omitempty"`
	ExtensionFr *ScalewayDomainV2alpha2ExtensionFR        `json:"extension_fr,omitempty"`
	FaxNumber   *string                                   `json:"fax_number,omitempty"`
	Firstname   *string                                   `json:"firstname,omitempty"`
	Id          *string                                   `json:"id,omitempty"`
	Lang        *ScalewayDomainV2alpha2Lang               `json:"lang,omitempty"`
	Lastname    *string                                   `json:"lastname,omitempty"`
	LegalForm   *ScalewayDomainV2alpha2LegalForm          `json:"legal_form,omitempty"`
	PhoneNumber *string                                   `json:"phone_number,omitempty"`
	Question1   *string                                   `json:"question1,omitempty"`
	Question2   *string                                   `json:"question2,omitempty"`
	Question3   *string                                   `json:"question3,omitempty"`
	Question4   *string                                   `json:"question4,omitempty"`
	Question5   *string                                   `json:"question5,omitempty"`
	Resale      *bool                                     `json:"resale,omitempty"`
	Siret       *string                                   `json:"siret,omitempty"`
	Vat         *string                                   `json:"vat,omitempty"`
	WhoisOptOut *bool                                     `json:"whois_opt_out,omitempty"`
	Zip         *string                                   `json:"zip,omitempty"`
}

// ScalewayDomainV2alpha2ContactEmailStatus defines model for scaleway.domain.v2alpha2.Contact.EmailStatus.
type ScalewayDomainV2alpha2ContactEmailStatus string

// List of ScalewayDomainV2alpha2ContactEmailStatus
const (
	ScalewayDomainV2alpha2ContactEmailStatus_email_status_unknown ScalewayDomainV2alpha2ContactEmailStatus = "email_status_unknown"
	ScalewayDomainV2alpha2ContactEmailStatus_invalid_email        ScalewayDomainV2alpha2ContactEmailStatus = "invalid_email"
	ScalewayDomainV2alpha2ContactEmailStatus_not_validated        ScalewayDomainV2alpha2ContactEmailStatus = "not_validated"
	ScalewayDomainV2alpha2ContactEmailStatus_validated            ScalewayDomainV2alpha2ContactEmailStatus = "validated"
)

// ScalewayDomainV2alpha2ContactRoles defines model for scaleway.domain.v2alpha2.ContactRoles.
type ScalewayDomainV2alpha2ContactRoles struct {
	Contact *ScalewayDomainV2alpha2Contact            `json:"contact,omitempty"`
	Roles   *ScalewayDomainV2alpha2ContactRoles_Roles `json:"roles,omitempty"`
}

// ScalewayDomainV2alpha2ContactRoles_Roles defines model for ScalewayDomainV2alpha2ContactRoles.Roles.
type ScalewayDomainV2alpha2ContactRoles_Roles struct {
	roleKey              *ScalewayDomainV2alpha2ContactRolesRoles `json:"<roleKey>,omitempty"`
	AdditionalProperties map[string]interface{}                   `json:"-"`
}

// ScalewayDomainV2alpha2ContactRolesRoles defines model for scaleway.domain.v2alpha2.ContactRoles.Roles.
type ScalewayDomainV2alpha2ContactRolesRoles struct {
	IsAdminitrative *bool `json:"is_adminitrative,omitempty"`
	IsOwner         *bool `json:"is_owner,omitempty"`
	IsTechnical     *bool `json:"is_technical,omitempty"`
}

// ScalewayDomainV2alpha2DNSZone defines model for scaleway.domain.v2alpha2.DNSZone.
type ScalewayDomainV2alpha2DNSZone struct {
	Domain          *string                              `json:"domain,omitempty"`
	Message         *GoogleProtobufStringValue           `json:"message"`
	Ns              *[]string                            `json:"ns,omitempty"`
	NsDefault       *[]string                            `json:"ns_default,omitempty"`
	NsMaster        *[]string                            `json:"ns_master,omitempty"`
	OrganizationIds *[]string                            `json:"organization_ids,omitempty"`
	Status          *ScalewayDomainV2alpha2DNSZoneStatus `json:"status,omitempty"`
	Subdomain       *string                              `json:"subdomain,omitempty"`
	UpdatedAt       *GoogleProtobufTimestamp             `json:"updated_at,omitempty"`
}

// ScalewayDomainV2alpha2DNSZoneStatus defines model for scaleway.domain.v2alpha2.DNSZone.Status.
type ScalewayDomainV2alpha2DNSZoneStatus string

// List of ScalewayDomainV2alpha2DNSZoneStatus
const (
	ScalewayDomainV2alpha2DNSZoneStatus__error  ScalewayDomainV2alpha2DNSZoneStatus = "error"
	ScalewayDomainV2alpha2DNSZoneStatus_active  ScalewayDomainV2alpha2DNSZoneStatus = "active"
	ScalewayDomainV2alpha2DNSZoneStatus_pending ScalewayDomainV2alpha2DNSZoneStatus = "pending"
	ScalewayDomainV2alpha2DNSZoneStatus_unknown ScalewayDomainV2alpha2DNSZoneStatus = "unknown"
)

// ScalewayDomainV2alpha2DSRecord defines model for scaleway.domain.v2alpha2.DSRecord.
type ScalewayDomainV2alpha2DSRecord struct {
	Algorithm *ScalewayDomainV2alpha2DSRecordDNSSECAlgorithm `json:"algorithm,omitempty"`
	Digest    *struct {
		Digest *string                                       `json:"digest,omitempty"`
		Type   *ScalewayDomainV2alpha2DigestDNSSECDigestType `json:"type,omitempty"`
	} `json:"digest,omitempty"`
	KeyId     *float32 `json:"key_id,omitempty"`
	PublicKey *struct {
		Key *string `json:"key,omitempty"`
	} `json:"public_key,omitempty"`
}

// ScalewayDomainV2alpha2DSRecordDNSSECAlgorithm defines model for scaleway.domain.v2alpha2.DSRecord.DNSSECAlgorithm.
type ScalewayDomainV2alpha2DSRecordDNSSECAlgorithm string

// List of ScalewayDomainV2alpha2DSRecordDNSSECAlgorithm
const (
	ScalewayDomainV2alpha2DSRecordDNSSECAlgorithm_dh                 ScalewayDomainV2alpha2DSRecordDNSSECAlgorithm = "dh"
	ScalewayDomainV2alpha2DSRecordDNSSECAlgorithm_dsa                ScalewayDomainV2alpha2DSRecordDNSSECAlgorithm = "dsa"
	ScalewayDomainV2alpha2DSRecordDNSSECAlgorithm_dsa_nsec3_sha1     ScalewayDomainV2alpha2DSRecordDNSSECAlgorithm = "dsa_nsec3_sha1"
	ScalewayDomainV2alpha2DSRecordDNSSECAlgorithm_ecc_gost           ScalewayDomainV2alpha2DSRecordDNSSECAlgorithm = "ecc_gost"
	ScalewayDomainV2alpha2DSRecordDNSSECAlgorithm_ecdsap256sha256    ScalewayDomainV2alpha2DSRecordDNSSECAlgorithm = "ecdsap256sha256"
	ScalewayDomainV2alpha2DSRecordDNSSECAlgorithm_ecdsap384sha384    ScalewayDomainV2alpha2DSRecordDNSSECAlgorithm = "ecdsap384sha384"
	ScalewayDomainV2alpha2DSRecordDNSSECAlgorithm_ed25519            ScalewayDomainV2alpha2DSRecordDNSSECAlgorithm = "ed25519"
	ScalewayDomainV2alpha2DSRecordDNSSECAlgorithm_ed448              ScalewayDomainV2alpha2DSRecordDNSSECAlgorithm = "ed448"
	ScalewayDomainV2alpha2DSRecordDNSSECAlgorithm_rsamd5             ScalewayDomainV2alpha2DSRecordDNSSECAlgorithm = "rsamd5"
	ScalewayDomainV2alpha2DSRecordDNSSECAlgorithm_rsasha1            ScalewayDomainV2alpha2DSRecordDNSSECAlgorithm = "rsasha1"
	ScalewayDomainV2alpha2DSRecordDNSSECAlgorithm_rsasha1_nsec3_sha1 ScalewayDomainV2alpha2DSRecordDNSSECAlgorithm = "rsasha1_nsec3_sha1"
	ScalewayDomainV2alpha2DSRecordDNSSECAlgorithm_rsasha256          ScalewayDomainV2alpha2DSRecordDNSSECAlgorithm = "rsasha256"
	ScalewayDomainV2alpha2DSRecordDNSSECAlgorithm_rsasha512          ScalewayDomainV2alpha2DSRecordDNSSECAlgorithm = "rsasha512"
)

// ScalewayDomainV2alpha2DeleteDNSZoneResponse defines model for scaleway.domain.v2alpha2.DeleteDNSZoneResponse.
type ScalewayDomainV2alpha2DeleteDNSZoneResponse map[string]interface{}

// ScalewayDomainV2alpha2DeleteExternalDomainResponse defines model for scaleway.domain.v2alpha2.DeleteExternalDomainResponse.
type ScalewayDomainV2alpha2DeleteExternalDomainResponse map[string]interface{}

// ScalewayDomainV2alpha2DeleteSSLCertificateResponse defines model for scaleway.domain.v2alpha2.DeleteSSLCertificateResponse.
type ScalewayDomainV2alpha2DeleteSSLCertificateResponse map[string]interface{}

// ScalewayDomainV2alpha2DigestDNSSECDigestType defines model for scaleway.domain.v2alpha2.Digest.DNSSECDigestType.
type ScalewayDomainV2alpha2DigestDNSSECDigestType string

// List of ScalewayDomainV2alpha2DigestDNSSECDigestType
const (
	ScalewayDomainV2alpha2DigestDNSSECDigestType_gost_r_34_11_94 ScalewayDomainV2alpha2DigestDNSSECDigestType = "gost_r_34_11_94"
	ScalewayDomainV2alpha2DigestDNSSECDigestType_sha_1           ScalewayDomainV2alpha2DigestDNSSECDigestType = "sha_1"
	ScalewayDomainV2alpha2DigestDNSSECDigestType_sha_256         ScalewayDomainV2alpha2DigestDNSSECDigestType = "sha_256"
	ScalewayDomainV2alpha2DigestDNSSECDigestType_sha_384         ScalewayDomainV2alpha2DigestDNSSECDigestType = "sha_384"
)

// ScalewayDomainV2alpha2Domain defines model for scaleway.domain.v2alpha2.Domain.
type ScalewayDomainV2alpha2Domain struct {
	AdministrativeContact             *ScalewayDomainV2alpha2Contact             `json:"administrative_contact,omitempty"`
	AutoRenewStatus                   *ScalewayDomainV2alpha2DomainFeatureStatus `json:"auto_renew_status,omitempty"`
	DnsZoneCount                      *float32                                   `json:"dns_zone_count,omitempty"`
	DnsZones                          *[]ScalewayDomainV2alpha2DNSZone           `json:"dns_zones,omitempty"`
	DnssecStatus                      *ScalewayDomainV2alpha2DomainFeatureStatus `json:"dnssec_status,omitempty"`
	Domain                            *string                                    `json:"domain,omitempty"`
	DsRecords                         *[]ScalewayDomainV2alpha2DSRecord          `json:"ds_records,omitempty"`
	Epp                               *[]string                                  `json:"epp,omitempty"`
	ExpiredAt                         *GoogleProtobufTimestamp                   `json:"expired_at,omitempty"`
	ExternalDomainRegistrationProcess *struct {
		ValidationToken *string `json:"validation_token,omitempty"`
	} `json:"external_domain_registration_process,omitempty"`
	IsExternal                  *bool                                                  `json:"is_external,omitempty"`
	OrganizationId              *string                                                `json:"organization_id,omitempty"`
	OwnerContact                *ScalewayDomainV2alpha2Contact                         `json:"owner_contact,omitempty"`
	Registrar                   *string                                                `json:"registrar,omitempty"`
	Status                      *ScalewayDomainV2alpha2DomainStatus                    `json:"status,omitempty"`
	TechnicalContact            *ScalewayDomainV2alpha2Contact                         `json:"technical_contact,omitempty"`
	TrademarkProtection         *ScalewayDomainV2alpha2DomainTrademarkProtectionConfig `json:"trademark_protection,omitempty"`
	TransferRegistrationProcess *struct {
		Status       *ScalewayDomainV2alpha2DomainRegistrationProcessTransferStatus `json:"status,omitempty"`
		VoteNewOwner *bool                                                          `json:"vote_new_owner,omitempty"`
		VoteOldOwner *bool                                                          `json:"vote_old_owner,omitempty"`
	} `json:"transfer_registration_process,omitempty"`
	UpdatedAt *GoogleProtobufTimestamp `json:"updated_at,omitempty"`
}

// ScalewayDomainV2alpha2DomainFeatureStatus defines model for scaleway.domain.v2alpha2.Domain.FeatureStatus.
type ScalewayDomainV2alpha2DomainFeatureStatus string

// List of ScalewayDomainV2alpha2DomainFeatureStatus
const (
	ScalewayDomainV2alpha2DomainFeatureStatus_disabled    ScalewayDomainV2alpha2DomainFeatureStatus = "disabled"
	ScalewayDomainV2alpha2DomainFeatureStatus_disabling   ScalewayDomainV2alpha2DomainFeatureStatus = "disabling"
	ScalewayDomainV2alpha2DomainFeatureStatus_enabled     ScalewayDomainV2alpha2DomainFeatureStatus = "enabled"
	ScalewayDomainV2alpha2DomainFeatureStatus_enabling    ScalewayDomainV2alpha2DomainFeatureStatus = "enabling"
	ScalewayDomainV2alpha2DomainFeatureStatus_unavailable ScalewayDomainV2alpha2DomainFeatureStatus = "unavailable"
)

// ScalewayDomainV2alpha2DomainRegistrationProcessTransferStatus defines model for scaleway.domain.v2alpha2.Domain.RegistrationProcessTransfer.Status.
type ScalewayDomainV2alpha2DomainRegistrationProcessTransferStatus string

// List of ScalewayDomainV2alpha2DomainRegistrationProcessTransferStatus
const (
	ScalewayDomainV2alpha2DomainRegistrationProcessTransferStatus_done                    ScalewayDomainV2alpha2DomainRegistrationProcessTransferStatus = "done"
	ScalewayDomainV2alpha2DomainRegistrationProcessTransferStatus_pending                 ScalewayDomainV2alpha2DomainRegistrationProcessTransferStatus = "pending"
	ScalewayDomainV2alpha2DomainRegistrationProcessTransferStatus_processing              ScalewayDomainV2alpha2DomainRegistrationProcessTransferStatus = "processing"
	ScalewayDomainV2alpha2DomainRegistrationProcessTransferStatus_rejected                ScalewayDomainV2alpha2DomainRegistrationProcessTransferStatus = "rejected"
	ScalewayDomainV2alpha2DomainRegistrationProcessTransferStatus_transfer_status_unknown ScalewayDomainV2alpha2DomainRegistrationProcessTransferStatus = "transfer_status_unknown"
	ScalewayDomainV2alpha2DomainRegistrationProcessTransferStatus_waitingVote             ScalewayDomainV2alpha2DomainRegistrationProcessTransferStatus = "waitingVote"
)

// ScalewayDomainV2alpha2DomainStatus defines model for scaleway.domain.v2alpha2.Domain.Status.
type ScalewayDomainV2alpha2DomainStatus string

// List of ScalewayDomainV2alpha2DomainStatus
const (
	ScalewayDomainV2alpha2DomainStatus_active        ScalewayDomainV2alpha2DomainStatus = "active"
	ScalewayDomainV2alpha2DomainStatus_checking      ScalewayDomainV2alpha2DomainStatus = "checking"
	ScalewayDomainV2alpha2DomainStatus_create_error  ScalewayDomainV2alpha2DomainStatus = "create_error"
	ScalewayDomainV2alpha2DomainStatus_creating      ScalewayDomainV2alpha2DomainStatus = "creating"
	ScalewayDomainV2alpha2DomainStatus_expired       ScalewayDomainV2alpha2DomainStatus = "expired"
	ScalewayDomainV2alpha2DomainStatus_expiring      ScalewayDomainV2alpha2DomainStatus = "expiring"
	ScalewayDomainV2alpha2DomainStatus_renew_error   ScalewayDomainV2alpha2DomainStatus = "renew_error"
	ScalewayDomainV2alpha2DomainStatus_renewing      ScalewayDomainV2alpha2DomainStatus = "renewing"
	ScalewayDomainV2alpha2DomainStatus_restore_error ScalewayDomainV2alpha2DomainStatus = "restore_error"
	ScalewayDomainV2alpha2DomainStatus_restoring     ScalewayDomainV2alpha2DomainStatus = "restoring"
	ScalewayDomainV2alpha2DomainStatus_to_create     ScalewayDomainV2alpha2DomainStatus = "to_create"
	ScalewayDomainV2alpha2DomainStatus_to_delete     ScalewayDomainV2alpha2DomainStatus = "to_delete"
	ScalewayDomainV2alpha2DomainStatus_to_renew      ScalewayDomainV2alpha2DomainStatus = "to_renew"
	ScalewayDomainV2alpha2DomainStatus_to_restore    ScalewayDomainV2alpha2DomainStatus = "to_restore"
	ScalewayDomainV2alpha2DomainStatus_to_xfer       ScalewayDomainV2alpha2DomainStatus = "to_xfer"
	ScalewayDomainV2alpha2DomainStatus_unknown       ScalewayDomainV2alpha2DomainStatus = "unknown"
	ScalewayDomainV2alpha2DomainStatus_updating      ScalewayDomainV2alpha2DomainStatus = "updating"
	ScalewayDomainV2alpha2DomainStatus_xfer_error    ScalewayDomainV2alpha2DomainStatus = "xfer_error"
	ScalewayDomainV2alpha2DomainStatus_xfering       ScalewayDomainV2alpha2DomainStatus = "xfering"
)

// ScalewayDomainV2alpha2DomainTrademarkProtectionConfig defines model for scaleway.domain.v2alpha2.Domain.TrademarkProtectionConfig.
type ScalewayDomainV2alpha2DomainTrademarkProtectionConfig map[string]interface{}

// ScalewayDomainV2alpha2DomainSummary defines model for scaleway.domain.v2alpha2.DomainSummary.
type ScalewayDomainV2alpha2DomainSummary struct {
	AutoRenewStatus                   *ScalewayDomainV2alpha2DomainFeatureStatus `json:"auto_renew_status,omitempty"`
	DnsZoneCount                      *float32                                   `json:"dns_zone_count,omitempty"`
	DnssecStatus                      *ScalewayDomainV2alpha2DomainFeatureStatus `json:"dnssec_status,omitempty"`
	Domain                            *string                                    `json:"domain,omitempty"`
	Epp                               *[]string                                  `json:"epp,omitempty"`
	ExpiredAt                         *GoogleProtobufTimestamp                   `json:"expired_at,omitempty"`
	ExternalDomainRegistrationProcess *struct {
		ValidationToken *string `json:"validation_token,omitempty"`
	} `json:"external_domain_registration_process,omitempty"`
	IsExternal                  *bool                               `json:"is_external,omitempty"`
	OrganizationId              *string                             `json:"organization_id,omitempty"`
	Registrar                   *string                             `json:"registrar,omitempty"`
	Status                      *ScalewayDomainV2alpha2DomainStatus `json:"status,omitempty"`
	TransferRegistrationProcess *struct {
		Status       *ScalewayDomainV2alpha2DomainRegistrationProcessTransferStatus `json:"status,omitempty"`
		VoteNewOwner *bool                                                          `json:"vote_new_owner,omitempty"`
		VoteOldOwner *bool                                                          `json:"vote_old_owner,omitempty"`
	} `json:"transfer_registration_process,omitempty"`
	UpdatedAt *GoogleProtobufTimestamp `json:"updated_at,omitempty"`
}

// ScalewayDomainV2alpha2ExtensionEU defines model for scaleway.domain.v2alpha2.ExtensionEU.
type ScalewayDomainV2alpha2ExtensionEU struct {
	EuropeanCitizenship *string `json:"european_citizenship,omitempty"`
}

// ScalewayDomainV2alpha2ExtensionFR defines model for scaleway.domain.v2alpha2.ExtensionFR.
type ScalewayDomainV2alpha2ExtensionFR struct {
	AssociationInfos *struct {
		PublicationJo     *GoogleProtobufTimestamp `json:"publication_jo,omitempty"`
		PublicationJoPage *float32                 `json:"publication_jo_page,omitempty"`
	} `json:"association_infos,omitempty"`
	BrandInfos *struct {
		BrandInpi *string `json:"brand_inpi,omitempty"`
	} `json:"brand_infos,omitempty"`
	CodeAuthAfnicInfos *struct {
		CodeAuthAfnic *string `json:"code_auth_afnic,omitempty"`
	} `json:"code_auth_afnic_infos,omitempty"`
	DunsInfos *struct {
		DunsId  *string `json:"duns_id,omitempty"`
		LocalId *string `json:"local_id,omitempty"`
	} `json:"duns_infos,omitempty"`
	Mode            *ScalewayDomainV2alpha2ExtensionFRMode `json:"mode,omitempty"`
	ParticularInfos *struct {
		WhoisOptOut *bool `json:"whois_opt_out,omitempty"`
	} `json:"particular_infos,omitempty"`
}

// ScalewayDomainV2alpha2ExtensionFRMode defines model for scaleway.domain.v2alpha2.ExtensionFR.Mode.
type ScalewayDomainV2alpha2ExtensionFRMode string

// List of ScalewayDomainV2alpha2ExtensionFRMode
const (
	ScalewayDomainV2alpha2ExtensionFRMode_association     ScalewayDomainV2alpha2ExtensionFRMode = "association"
	ScalewayDomainV2alpha2ExtensionFRMode_brand           ScalewayDomainV2alpha2ExtensionFRMode = "brand"
	ScalewayDomainV2alpha2ExtensionFRMode_code_auth_afnic ScalewayDomainV2alpha2ExtensionFRMode = "code_auth_afnic"
	ScalewayDomainV2alpha2ExtensionFRMode_duns            ScalewayDomainV2alpha2ExtensionFRMode = "duns"
	ScalewayDomainV2alpha2ExtensionFRMode_local           ScalewayDomainV2alpha2ExtensionFRMode = "local"
	ScalewayDomainV2alpha2ExtensionFRMode_mode_unknown    ScalewayDomainV2alpha2ExtensionFRMode = "mode_unknown"
	ScalewayDomainV2alpha2ExtensionFRMode_particular      ScalewayDomainV2alpha2ExtensionFRMode = "particular"
	ScalewayDomainV2alpha2ExtensionFRMode_siret           ScalewayDomainV2alpha2ExtensionFRMode = "siret"
)

// ScalewayDomainV2alpha2GetDNSZoneTsigKeyResponse defines model for scaleway.domain.v2alpha2.GetDNSZoneTsigKeyResponse.
type ScalewayDomainV2alpha2GetDNSZoneTsigKeyResponse struct {
	Algorithm *string `json:"algorithm,omitempty"`
	Id        *string `json:"id,omitempty"`
	Key       *string `json:"key,omitempty"`
}

// ScalewayDomainV2alpha2GetDNSZoneVersionDiffResponse defines model for scaleway.domain.v2alpha2.GetDNSZoneVersionDiffResponse.
type ScalewayDomainV2alpha2GetDNSZoneVersionDiffResponse struct {
	Changes *[]ScalewayDomainV2alpha2RecordChange `json:"changes,omitempty"`
}

// ScalewayDomainV2alpha2GetDomainAuthCodeResponse defines model for scaleway.domain.v2alpha2.GetDomainAuthCodeResponse.
type ScalewayDomainV2alpha2GetDomainAuthCodeResponse struct {
	AuthCode *string `json:"auth_code,omitempty"`
}

// ScalewayDomainV2alpha2GetDomainResponse defines model for scaleway.domain.v2alpha2.GetDomainResponse.
type ScalewayDomainV2alpha2GetDomainResponse struct {
	Domain *ScalewayDomainV2alpha2Domain `json:"domain,omitempty"`
}

// ScalewayDomainV2alpha2ImportProviderDNSZoneResponse defines model for scaleway.domain.v2alpha2.ImportProviderDNSZoneResponse.
type ScalewayDomainV2alpha2ImportProviderDNSZoneResponse struct {
	Records *[]ScalewayDomainV2alpha2Record `json:"records,omitempty"`
}

// ScalewayDomainV2alpha2ImportRawDNSZoneResponse defines model for scaleway.domain.v2alpha2.ImportRawDNSZoneResponse.
type ScalewayDomainV2alpha2ImportRawDNSZoneResponse struct {
	Records *[]ScalewayDomainV2alpha2Record `json:"records,omitempty"`
}

// ScalewayDomainV2alpha2Lang defines model for scaleway.domain.v2alpha2.Lang.
type ScalewayDomainV2alpha2Lang string

// List of ScalewayDomainV2alpha2Lang
const (
	ScalewayDomainV2alpha2Lang_english      ScalewayDomainV2alpha2Lang = "english"
	ScalewayDomainV2alpha2Lang_french       ScalewayDomainV2alpha2Lang = "french"
	ScalewayDomainV2alpha2Lang_german       ScalewayDomainV2alpha2Lang = "german"
	ScalewayDomainV2alpha2Lang_lang_unknown ScalewayDomainV2alpha2Lang = "lang_unknown"
	ScalewayDomainV2alpha2Lang_spanish      ScalewayDomainV2alpha2Lang = "spanish"
)

// ScalewayDomainV2alpha2LegalForm defines model for scaleway.domain.v2alpha2.LegalForm.
type ScalewayDomainV2alpha2LegalForm string

// List of ScalewayDomainV2alpha2LegalForm
const (
	ScalewayDomainV2alpha2LegalForm_association        ScalewayDomainV2alpha2LegalForm = "association"
	ScalewayDomainV2alpha2LegalForm_legal_form_unknown ScalewayDomainV2alpha2LegalForm = "legal_form_unknown"
	ScalewayDomainV2alpha2LegalForm_other              ScalewayDomainV2alpha2LegalForm = "other"
	ScalewayDomainV2alpha2LegalForm_particular         ScalewayDomainV2alpha2LegalForm = "particular"
	ScalewayDomainV2alpha2LegalForm_society            ScalewayDomainV2alpha2LegalForm = "society"
)

// ScalewayDomainV2alpha2ListContactsResponse defines model for scaleway.domain.v2alpha2.ListContactsResponse.
type ScalewayDomainV2alpha2ListContactsResponse struct {
	Contacts *[]ScalewayDomainV2alpha2ContactRoles `json:"contacts,omitempty"`
}

// ScalewayDomainV2alpha2ListDNSZoneNameserversResponse defines model for scaleway.domain.v2alpha2.ListDNSZoneNameserversResponse.
type ScalewayDomainV2alpha2ListDNSZoneNameserversResponse struct {
	Ns *[]ScalewayDomainV2alpha2Nameserver `json:"ns,omitempty"`
}

// ScalewayDomainV2alpha2ListDNSZoneRecordsRequestOrderBy defines model for scaleway.domain.v2alpha2.ListDNSZoneRecordsRequest.OrderBy.
type ScalewayDomainV2alpha2ListDNSZoneRecordsRequestOrderBy string

// List of ScalewayDomainV2alpha2ListDNSZoneRecordsRequestOrderBy
const (
	ScalewayDomainV2alpha2ListDNSZoneRecordsRequestOrderBy_name_asc  ScalewayDomainV2alpha2ListDNSZoneRecordsRequestOrderBy = "name_asc"
	ScalewayDomainV2alpha2ListDNSZoneRecordsRequestOrderBy_name_desc ScalewayDomainV2alpha2ListDNSZoneRecordsRequestOrderBy = "name_desc"
)

// ScalewayDomainV2alpha2ListDNSZoneRecordsResponse defines model for scaleway.domain.v2alpha2.ListDNSZoneRecordsResponse.
type ScalewayDomainV2alpha2ListDNSZoneRecordsResponse struct {
	Records    *[]ScalewayDomainV2alpha2Record `json:"records,omitempty"`
	TotalCount *float32                        `json:"total_count,omitempty"`
}

// ScalewayDomainV2alpha2ListDNSZoneVersionRecordsResponse defines model for scaleway.domain.v2alpha2.ListDNSZoneVersionRecordsResponse.
type ScalewayDomainV2alpha2ListDNSZoneVersionRecordsResponse struct {
	Records *[]ScalewayDomainV2alpha2Record `json:"records,omitempty"`
}

// ScalewayDomainV2alpha2ListDNSZoneVersionsResponse defines model for scaleway.domain.v2alpha2.ListDNSZoneVersionsResponse.
type ScalewayDomainV2alpha2ListDNSZoneVersionsResponse struct {
	Versions *[]ScalewayDomainV2alpha2Version `json:"versions,omitempty"`
}

// ScalewayDomainV2alpha2ListDNSZonesRequestOrderBy defines model for scaleway.domain.v2alpha2.ListDNSZonesRequest.OrderBy.
type ScalewayDomainV2alpha2ListDNSZonesRequestOrderBy string

// List of ScalewayDomainV2alpha2ListDNSZonesRequestOrderBy
const (
	ScalewayDomainV2alpha2ListDNSZonesRequestOrderBy_domain_asc     ScalewayDomainV2alpha2ListDNSZonesRequestOrderBy = "domain_asc"
	ScalewayDomainV2alpha2ListDNSZonesRequestOrderBy_domain_desc    ScalewayDomainV2alpha2ListDNSZonesRequestOrderBy = "domain_desc"
	ScalewayDomainV2alpha2ListDNSZonesRequestOrderBy_subdomain_asc  ScalewayDomainV2alpha2ListDNSZonesRequestOrderBy = "subdomain_asc"
	ScalewayDomainV2alpha2ListDNSZonesRequestOrderBy_subdomain_desc ScalewayDomainV2alpha2ListDNSZonesRequestOrderBy = "subdomain_desc"
)

// ScalewayDomainV2alpha2ListDNSZonesResponse defines model for scaleway.domain.v2alpha2.ListDNSZonesResponse.
type ScalewayDomainV2alpha2ListDNSZonesResponse struct {
	DnsZones   *[]ScalewayDomainV2alpha2DNSZone `json:"dns_zones,omitempty"`
	TotalCount *float32                         `json:"total_count,omitempty"`
}

// ScalewayDomainV2alpha2ListDomainsRequestOrderBy defines model for scaleway.domain.v2alpha2.ListDomainsRequest.OrderBy.
type ScalewayDomainV2alpha2ListDomainsRequestOrderBy string

// List of ScalewayDomainV2alpha2ListDomainsRequestOrderBy
const (
	ScalewayDomainV2alpha2ListDomainsRequestOrderBy_domain_asc  ScalewayDomainV2alpha2ListDomainsRequestOrderBy = "domain_asc"
	ScalewayDomainV2alpha2ListDomainsRequestOrderBy_domain_desc ScalewayDomainV2alpha2ListDomainsRequestOrderBy = "domain_desc"
)

// ScalewayDomainV2alpha2ListDomainsResponse defines model for scaleway.domain.v2alpha2.ListDomainsResponse.
type ScalewayDomainV2alpha2ListDomainsResponse struct {
	Domains    *[]ScalewayDomainV2alpha2DomainSummary `json:"domains,omitempty"`
	TotalCount *float32                               `json:"total_count,omitempty"`
}

// ScalewayDomainV2alpha2ListSSLCertificatesResponse defines model for scaleway.domain.v2alpha2.ListSSLCertificatesResponse.
type ScalewayDomainV2alpha2ListSSLCertificatesResponse struct {
	Certificates *[]ScalewayDomainV2alpha2ZoneSSL `json:"certificates,omitempty"`
}

// ScalewayDomainV2alpha2ListTasksResponse defines model for scaleway.domain.v2alpha2.ListTasksResponse.
type ScalewayDomainV2alpha2ListTasksResponse struct {
	Tasks      *[]ScalewayDomainV2alpha2Task `json:"tasks,omitempty"`
	TotalCount *float32                      `json:"total_count,omitempty"`
}

// ScalewayDomainV2alpha2Nameserver defines model for scaleway.domain.v2alpha2.Nameserver.
type ScalewayDomainV2alpha2Nameserver struct {
	Ip   *[]string `json:"ip,omitempty"`
	Name *string   `json:"name,omitempty"`
}

// ScalewayDomainV2alpha2Record defines model for scaleway.domain.v2alpha2.Record.
type ScalewayDomainV2alpha2Record struct {
	Comment     *GoogleProtobufStringValue `json:"comment"`
	Data        *string                    `json:"data,omitempty"`
	GeoIpConfig *struct {
		Default *string                                          `json:"default,omitempty"`
		Filters *[]ScalewayDomainV2alpha2RecordGeoIPConfigFilter `json:"filters,omitempty"`
	} `json:"geo_ip_config,omitempty"`
	Name            *string  `json:"name,omitempty"`
	Priority        *float32 `json:"priority,omitempty"`
	ServiceUpConfig *struct {

		// (IP address)
		Ips         *[]string                                            `json:"ips,omitempty"`
		MustContain *GoogleProtobufStringValue                           `json:"must_contain"`
		Strategy    *ScalewayDomainV2alpha2RecordServiceUPConfigStrategy `json:"strategy,omitempty"`
		Url         *string                                              `json:"url,omitempty"`
		UserAgent   *GoogleProtobufStringValue                           `json:"user_agent"`
	} `json:"service_up_config,omitempty"`
	Ttl        *float32                          `json:"ttl,omitempty"`
	Type       *ScalewayDomainV2alpha2RecordType `json:"type,omitempty"`
	ViewConfig *struct {
		Views *[]ScalewayDomainV2alpha2RecordViewConfigView `json:"views,omitempty"`
	} `json:"view_config,omitempty"`
	WeightedConfig *struct {
		WeightedIps *[]ScalewayDomainV2alpha2RecordWeightedConfigWeightedIP `json:"weighted_ips,omitempty"`
	} `json:"weighted_config,omitempty"`
}

// ScalewayDomainV2alpha2RecordGeoIPConfigFilter defines model for scaleway.domain.v2alpha2.Record.GeoIPConfig.Filter.
type ScalewayDomainV2alpha2RecordGeoIPConfigFilter struct {
	Continents *[]string `json:"continents,omitempty"`
	Countries  *[]string `json:"countries,omitempty"`
	Data       *string   `json:"data,omitempty"`
}

// ScalewayDomainV2alpha2RecordServiceUPConfigStrategy defines model for scaleway.domain.v2alpha2.Record.ServiceUPConfig.Strategy.
type ScalewayDomainV2alpha2RecordServiceUPConfigStrategy string

// List of ScalewayDomainV2alpha2RecordServiceUPConfigStrategy
const (
	ScalewayDomainV2alpha2RecordServiceUPConfigStrategy_hashed ScalewayDomainV2alpha2RecordServiceUPConfigStrategy = "hashed"
	ScalewayDomainV2alpha2RecordServiceUPConfigStrategy_random ScalewayDomainV2alpha2RecordServiceUPConfigStrategy = "random"
)

// ScalewayDomainV2alpha2RecordType defines model for scaleway.domain.v2alpha2.Record.Type.
type ScalewayDomainV2alpha2RecordType string

// List of ScalewayDomainV2alpha2RecordType
const (
	ScalewayDomainV2alpha2RecordType_A                ScalewayDomainV2alpha2RecordType = "A"
	ScalewayDomainV2alpha2RecordType_AAAA             ScalewayDomainV2alpha2RecordType = "AAAA"
	ScalewayDomainV2alpha2RecordType_ALIAS            ScalewayDomainV2alpha2RecordType = "ALIAS"
	ScalewayDomainV2alpha2RecordType_CAA              ScalewayDomainV2alpha2RecordType = "CAA"
	ScalewayDomainV2alpha2RecordType_CNAME            ScalewayDomainV2alpha2RecordType = "CNAME"
	ScalewayDomainV2alpha2RecordType_FUNCTION         ScalewayDomainV2alpha2RecordType = "FUNCTION"
	ScalewayDomainV2alpha2RecordType_FUNC_MYIP_A      ScalewayDomainV2alpha2RecordType = "FUNC_MYIP_A"
	ScalewayDomainV2alpha2RecordType_FUNC_MYIP_AAAA   ScalewayDomainV2alpha2RecordType = "FUNC_MYIP_AAAA"
	ScalewayDomainV2alpha2RecordType_FUNC_PORTUP_A    ScalewayDomainV2alpha2RecordType = "FUNC_PORTUP_A"
	ScalewayDomainV2alpha2RecordType_FUNC_PORTUP_AAAA ScalewayDomainV2alpha2RecordType = "FUNC_PORTUP_AAAA"
	ScalewayDomainV2alpha2RecordType_FUNC_URLUP_A     ScalewayDomainV2alpha2RecordType = "FUNC_URLUP_A"
	ScalewayDomainV2alpha2RecordType_FUNC_URLUP_AAAA  ScalewayDomainV2alpha2RecordType = "FUNC_URLUP_AAAA"
	ScalewayDomainV2alpha2RecordType_FUNC_VIEW_A      ScalewayDomainV2alpha2RecordType = "FUNC_VIEW_A"
	ScalewayDomainV2alpha2RecordType_FUNC_VIEW_AAAA   ScalewayDomainV2alpha2RecordType = "FUNC_VIEW_AAAA"
	ScalewayDomainV2alpha2RecordType_FUNC_VIEW_CNAME  ScalewayDomainV2alpha2RecordType = "FUNC_VIEW_CNAME"
	ScalewayDomainV2alpha2RecordType_FUNC_VIEW_TXT    ScalewayDomainV2alpha2RecordType = "FUNC_VIEW_TXT"
	ScalewayDomainV2alpha2RecordType_MX               ScalewayDomainV2alpha2RecordType = "MX"
	ScalewayDomainV2alpha2RecordType_NS               ScalewayDomainV2alpha2RecordType = "NS"
	ScalewayDomainV2alpha2RecordType_PTR              ScalewayDomainV2alpha2RecordType = "PTR"
	ScalewayDomainV2alpha2RecordType_SRV              ScalewayDomainV2alpha2RecordType = "SRV"
	ScalewayDomainV2alpha2RecordType_TLSA             ScalewayDomainV2alpha2RecordType = "TLSA"
	ScalewayDomainV2alpha2RecordType_TXT              ScalewayDomainV2alpha2RecordType = "TXT"
	ScalewayDomainV2alpha2RecordType_unknown          ScalewayDomainV2alpha2RecordType = "unknown"
)

// ScalewayDomainV2alpha2RecordViewConfigView defines model for scaleway.domain.v2alpha2.Record.ViewConfig.View.
type ScalewayDomainV2alpha2RecordViewConfigView struct {
	Data   *string `json:"data,omitempty"`
	Subnet *string `json:"subnet,omitempty"`
}

// ScalewayDomainV2alpha2RecordWeightedConfigWeightedIP defines model for scaleway.domain.v2alpha2.Record.WeightedConfig.WeightedIP.
type ScalewayDomainV2alpha2RecordWeightedConfigWeightedIP struct {

	// (IP address)
	Ip     *string  `json:"ip,omitempty"`
	Weight *float32 `json:"weight,omitempty"`
}

// ScalewayDomainV2alpha2RecordChange defines model for scaleway.domain.v2alpha2.RecordChange.
type ScalewayDomainV2alpha2RecordChange struct {
	Add *struct {
		Records *[]ScalewayDomainV2alpha2Record `json:"records,omitempty"`
	} `json:"add,omitempty"`
	Clear  *map[string]interface{} `json:"clear,omitempty"`
	Delete *struct {
		Data *string                           `json:"data,omitempty"`
		Name *string                           `json:"name,omitempty"`
		Type *ScalewayDomainV2alpha2RecordType `json:"type,omitempty"`
	} `json:"delete,omitempty"`
	Set *struct {
		Data    *string                           `json:"data,omitempty"`
		Name    *string                           `json:"name,omitempty"`
		Records *[]ScalewayDomainV2alpha2Record   `json:"records,omitempty"`
		Ttl     *float32                          `json:"ttl,omitempty"`
		Type    *ScalewayDomainV2alpha2RecordType `json:"type,omitempty"`
	} `json:"set,omitempty"`
}

// ScalewayDomainV2alpha2RefreshDNSZoneResponse defines model for scaleway.domain.v2alpha2.RefreshDNSZoneResponse.
type ScalewayDomainV2alpha2RefreshDNSZoneResponse struct {
	DnsZones *[]ScalewayDomainV2alpha2DNSZone `json:"dns_zones,omitempty"`
}

// ScalewayDomainV2alpha2RegisterExternalDomainResponse defines model for scaleway.domain.v2alpha2.RegisterExternalDomainResponse.
type ScalewayDomainV2alpha2RegisterExternalDomainResponse struct {
	CreatedAt       *GoogleProtobufTimestamp `json:"created_at,omitempty"`
	Domain          *string                  `json:"domain,omitempty"`
	OrganizationId  *string                  `json:"organization_id,omitempty"`
	ValidationToken *string                  `json:"validation_token,omitempty"`
}

// ScalewayDomainV2alpha2RestoreDNSZoneVersionResponse defines model for scaleway.domain.v2alpha2.RestoreDNSZoneVersionResponse.
type ScalewayDomainV2alpha2RestoreDNSZoneVersionResponse map[string]interface{}

// ScalewayDomainV2alpha2Task defines model for scaleway.domain.v2alpha2.Task.
type ScalewayDomainV2alpha2Task struct {
	Domain    *GoogleProtobufStringValue        `json:"domain"`
	Id        *string                           `json:"id,omitempty"`
	Message   *string                           `json:"message,omitempty"`
	StartedAt *GoogleProtobufTimestamp          `json:"started_at,omitempty"`
	Status    *ScalewayDomainV2alpha2TaskStatus `json:"status,omitempty"`
	Type      *ScalewayDomainV2alpha2TaskType   `json:"type,omitempty"`
	UpdatedAt *GoogleProtobufTimestamp          `json:"updated_at,omitempty"`
}

// ScalewayDomainV2alpha2TaskStatus defines model for scaleway.domain.v2alpha2.Task.Status.
type ScalewayDomainV2alpha2TaskStatus string

// List of ScalewayDomainV2alpha2TaskStatus
const (
	ScalewayDomainV2alpha2TaskStatus__error          ScalewayDomainV2alpha2TaskStatus = "error"
	ScalewayDomainV2alpha2TaskStatus__new            ScalewayDomainV2alpha2TaskStatus = "new"
	ScalewayDomainV2alpha2TaskStatus_pending         ScalewayDomainV2alpha2TaskStatus = "pending"
	ScalewayDomainV2alpha2TaskStatus_success         ScalewayDomainV2alpha2TaskStatus = "success"
	ScalewayDomainV2alpha2TaskStatus_unavailable     ScalewayDomainV2alpha2TaskStatus = "unavailable"
	ScalewayDomainV2alpha2TaskStatus_waiting_payment ScalewayDomainV2alpha2TaskStatus = "waiting_payment"
)

// ScalewayDomainV2alpha2TaskType defines model for scaleway.domain.v2alpha2.Task.Type.
type ScalewayDomainV2alpha2TaskType string

// List of ScalewayDomainV2alpha2TaskType
const (
	ScalewayDomainV2alpha2TaskType_cancel_task              ScalewayDomainV2alpha2TaskType = "cancel_task"
	ScalewayDomainV2alpha2TaskType_create_domain            ScalewayDomainV2alpha2TaskType = "create_domain"
	ScalewayDomainV2alpha2TaskType_create_external_domain   ScalewayDomainV2alpha2TaskType = "create_external_domain"
	ScalewayDomainV2alpha2TaskType_delete_domain            ScalewayDomainV2alpha2TaskType = "delete_domain"
	ScalewayDomainV2alpha2TaskType_delete_domain_expired    ScalewayDomainV2alpha2TaskType = "delete_domain_expired"
	ScalewayDomainV2alpha2TaskType_delete_external_domain   ScalewayDomainV2alpha2TaskType = "delete_external_domain"
	ScalewayDomainV2alpha2TaskType_disable_dnssec           ScalewayDomainV2alpha2TaskType = "disable_dnssec"
	ScalewayDomainV2alpha2TaskType_enable_dnssec            ScalewayDomainV2alpha2TaskType = "enable_dnssec"
	ScalewayDomainV2alpha2TaskType_generate_ssl_certificate ScalewayDomainV2alpha2TaskType = "generate_ssl_certificate"
	ScalewayDomainV2alpha2TaskType_lock_domain_transfer     ScalewayDomainV2alpha2TaskType = "lock_domain_transfer"
	ScalewayDomainV2alpha2TaskType_renew_domain             ScalewayDomainV2alpha2TaskType = "renew_domain"
	ScalewayDomainV2alpha2TaskType_renew_ssl_certificate    ScalewayDomainV2alpha2TaskType = "renew_ssl_certificate"
	ScalewayDomainV2alpha2TaskType_restore_domain           ScalewayDomainV2alpha2TaskType = "restore_domain"
	ScalewayDomainV2alpha2TaskType_send_message             ScalewayDomainV2alpha2TaskType = "send_message"
	ScalewayDomainV2alpha2TaskType_trade_domain             ScalewayDomainV2alpha2TaskType = "trade_domain"
	ScalewayDomainV2alpha2TaskType_transfer_domain          ScalewayDomainV2alpha2TaskType = "transfer_domain"
	ScalewayDomainV2alpha2TaskType_unknown                  ScalewayDomainV2alpha2TaskType = "unknown"
	ScalewayDomainV2alpha2TaskType_unlock_domain_transfer   ScalewayDomainV2alpha2TaskType = "unlock_domain_transfer"
	ScalewayDomainV2alpha2TaskType_update_contact           ScalewayDomainV2alpha2TaskType = "update_contact"
	ScalewayDomainV2alpha2TaskType_update_domain            ScalewayDomainV2alpha2TaskType = "update_domain"
)

// ScalewayDomainV2alpha2UpdateDNSZoneNameserversResponse defines model for scaleway.domain.v2alpha2.UpdateDNSZoneNameserversResponse.
type ScalewayDomainV2alpha2UpdateDNSZoneNameserversResponse struct {
	Ns *[]ScalewayDomainV2alpha2Nameserver `json:"ns,omitempty"`
}

// ScalewayDomainV2alpha2UpdateDNSZoneRecordsResponse defines model for scaleway.domain.v2alpha2.UpdateDNSZoneRecordsResponse.
type ScalewayDomainV2alpha2UpdateDNSZoneRecordsResponse struct {
	Records *[]ScalewayDomainV2alpha2Record `json:"records,omitempty"`
}

// ScalewayDomainV2alpha2Version defines model for scaleway.domain.v2alpha2.Version.
type ScalewayDomainV2alpha2Version struct {
	CreatedAt *GoogleProtobufTimestamp `json:"created_at,omitempty"`
}

// ScalewayDomainV2alpha2ZoneSSL defines model for scaleway.domain.v2alpha2.ZoneSSL.
type ScalewayDomainV2alpha2ZoneSSL struct {
	AlternativeDnsZones *[]string                            `json:"alternative_dns_zones,omitempty"`
	Certificate         *[]string                            `json:"certificate,omitempty"`
	CreatedAt           *GoogleProtobufTimestamp             `json:"created_at,omitempty"`
	DnsZone             *string                              `json:"dns_zone,omitempty"`
	ExpiredAt           *GoogleProtobufTimestamp             `json:"expired_at,omitempty"`
	PrivateKey          *[]string                            `json:"private_key,omitempty"`
	Status              *ScalewayDomainV2alpha2ZoneSSLStatus `json:"status,omitempty"`
}

// ScalewayDomainV2alpha2ZoneSSLStatus defines model for scaleway.domain.v2alpha2.ZoneSSL.Status.
type ScalewayDomainV2alpha2ZoneSSLStatus string

// List of ScalewayDomainV2alpha2ZoneSSLStatus
const (
	ScalewayDomainV2alpha2ZoneSSLStatus__error  ScalewayDomainV2alpha2ZoneSSLStatus = "error"
	ScalewayDomainV2alpha2ZoneSSLStatus__new    ScalewayDomainV2alpha2ZoneSSLStatus = "new"
	ScalewayDomainV2alpha2ZoneSSLStatus_pending ScalewayDomainV2alpha2ZoneSSLStatus = "pending"
	ScalewayDomainV2alpha2ZoneSSLStatus_success ScalewayDomainV2alpha2ZoneSSLStatus = "success"
	ScalewayDomainV2alpha2ZoneSSLStatus_unknown ScalewayDomainV2alpha2ZoneSSLStatus = "unknown"
)

// ScalewayStdFile defines model for scaleway.std.File.
type ScalewayStdFile struct {
	Content     *string `json:"content,omitempty"`
	ContentType *string `json:"content_type,omitempty"`
	Name        *string `json:"name,omitempty"`
}

// ScalewayStdStringsValue defines model for scaleway.std.StringsValue.
type ScalewayStdStringsValue []string

// ListContactsParams defines parameters for ListContacts.
type ListContactsParams struct {
	Domain         *GoogleProtobufStringValue `json:"domain,omitempty"`
	OrganizationId *GoogleProtobufStringValue `json:"organization_id,omitempty"`
}

// UpdateContactJSONBody defines parameters for UpdateContact.
type UpdateContactJSONBody struct {
	Address1    *GoogleProtobufStringValue         `json:"address1"`
	Address2    *GoogleProtobufStringValue         `json:"address2"`
	Answer1     *GoogleProtobufStringValue         `json:"answer1"`
	Answer2     *GoogleProtobufStringValue         `json:"answer2"`
	Answer3     *GoogleProtobufStringValue         `json:"answer3"`
	Answer4     *GoogleProtobufStringValue         `json:"answer4"`
	Answer5     *GoogleProtobufStringValue         `json:"answer5"`
	City        *GoogleProtobufStringValue         `json:"city"`
	Country     *GoogleProtobufStringValue         `json:"country"`
	Email       *GoogleProtobufStringValue         `json:"email"`
	EmailAlt    *GoogleProtobufStringValue         `json:"email_alt"`
	ExtensionEu *ScalewayDomainV2alpha2ExtensionEU `json:"extension_eu,omitempty"`
	ExtensionFr *ScalewayDomainV2alpha2ExtensionFR `json:"extension_fr,omitempty"`
	FaxNumber   *GoogleProtobufStringValue         `json:"fax_number"`
	Lang        *ScalewayDomainV2alpha2Lang        `json:"lang,omitempty"`
	PhoneNumber *GoogleProtobufStringValue         `json:"phone_number"`
	Question1   *GoogleProtobufStringValue         `json:"question1"`
	Question2   *GoogleProtobufStringValue         `json:"question2"`
	Question3   *GoogleProtobufStringValue         `json:"question3"`
	Question4   *GoogleProtobufStringValue         `json:"question4"`
	Question5   *GoogleProtobufStringValue         `json:"question5"`
	Resale      *GoogleProtobufBoolValue           `json:"resale"`
	Siret       *GoogleProtobufStringValue         `json:"siret"`
	Vat         *GoogleProtobufStringValue         `json:"vat"`
	WhoisOptOut *GoogleProtobufBoolValue           `json:"whois_opt_out"`
	Zip         *GoogleProtobufStringValue         `json:"zip"`
}

// ListDNSZonesParams defines parameters for ListDNSZones.
type ListDNSZonesParams struct {

	// Page number
	Page *float32 `json:"page,omitempty"`

	// Page size
	PageSize       *float32                                          `json:"page_size,omitempty"`
	OrderBy        *ScalewayDomainV2alpha2ListDNSZonesRequestOrderBy `json:"order_by,omitempty"`
	Domain         *string                                           `json:"domain,omitempty"`
	DnsZone        *string                                           `json:"dns_zone,omitempty"`
	OrganizationId *GoogleProtobufStringValue                        `json:"organization_id,omitempty"`
}

// CreateDNSZoneJSONBody defines parameters for CreateDNSZone.
type CreateDNSZoneJSONBody struct {
	Domain          *string   `json:"domain,omitempty"`
	OrganizationIds *[]string `json:"organization_ids,omitempty"`
	Subdomain       *string   `json:"subdomain,omitempty"`
}

// UpdateDNSZoneJSONBody defines parameters for UpdateDNSZone.
type UpdateDNSZoneJSONBody struct {
	NewDnsZone      *GoogleProtobufStringValue `json:"new_dns_zone"`
	OrganizationIds *ScalewayStdStringsValue   `json:"organization_ids"`
}

// CopyDNSZoneJSONBody defines parameters for CopyDNSZone.
type CopyDNSZoneJSONBody struct {
	NewDnsZone *GoogleProtobufStringValue `json:"new_dns_zone"`
	Overwrite  *GoogleProtobufBoolValue   `json:"overwrite"`
}

// ImportProviderDNSZoneJSONBody defines parameters for ImportProviderDNSZone.
type ImportProviderDNSZoneJSONBody struct {
	OnlineV1 *struct {
		Token *string `json:"token,omitempty"`
	} `json:"online_v1,omitempty"`
}

// ListDNSZoneNameserversParams defines parameters for ListDNSZoneNameservers.
type ListDNSZoneNameserversParams struct {
	OrganizationId *GoogleProtobufStringValue `json:"organization_id,omitempty"`
}

// UpdateDNSZoneNameserversJSONBody defines parameters for UpdateDNSZoneNameservers.
type UpdateDNSZoneNameserversJSONBody struct {
	Ns *[]ScalewayDomainV2alpha2Nameserver `json:"ns,omitempty"`
}

// ExportRawDNSZoneParams defines parameters for ExportRawDNSZone.
type ExportRawDNSZoneParams struct {
	Format *string `json:"format,omitempty"`
}

// ImportRawDNSZoneJSONBody defines parameters for ImportRawDNSZone.
type ImportRawDNSZoneJSONBody struct {
	Content *string `json:"content,omitempty"`
	Format  *string `json:"format,omitempty"`
}

// ListDNSZoneRecordsParams defines parameters for ListDNSZoneRecords.
type ListDNSZoneRecordsParams struct {

	// Page number
	Page *float32 `json:"page,omitempty"`

	// Page size
	PageSize       *float32                                                `json:"page_size,omitempty"`
	OrderBy        *ScalewayDomainV2alpha2ListDNSZoneRecordsRequestOrderBy `json:"order_by,omitempty"`
	Name           *string                                                 `json:"name,omitempty"`
	Type           *ScalewayDomainV2alpha2RecordType                       `json:"type,omitempty"`
	OrganizationId *GoogleProtobufStringValue                              `json:"organization_id,omitempty"`
}

// UpdateDNSZoneRecordsJSONBody defines parameters for UpdateDNSZoneRecords.
type UpdateDNSZoneRecordsJSONBody struct {
	Changes          *[]ScalewayDomainV2alpha2RecordChange `json:"changes,omitempty"`
	ReturnAllRecords *GoogleProtobufBoolValue              `json:"return_all_records"`
}

// RefreshDNSZoneJSONBody defines parameters for RefreshDNSZone.
type RefreshDNSZoneJSONBody struct {
	RecreateDnsZone    *bool `json:"recreate_dns_zone,omitempty"`
	RecreateSubDnsZone *bool `json:"recreate_sub_dns_zone,omitempty"`
}

// ListDNSZoneVersionsParams defines parameters for ListDNSZoneVersions.
type ListDNSZoneVersionsParams struct {
	OrganizationId *GoogleProtobufStringValue `json:"organization_id,omitempty"`
}

// ListDNSZoneVersionRecordsParams defines parameters for ListDNSZoneVersionRecords.
type ListDNSZoneVersionRecordsParams struct {
	OrganizationId *GoogleProtobufStringValue `json:"organization_id,omitempty"`
}

// RestoreDNSZoneVersionJSONBody defines parameters for RestoreDNSZoneVersion.
type RestoreDNSZoneVersionJSONBody map[string]interface{}

// ListDomainsParams defines parameters for ListDomains.
type ListDomainsParams struct {

	// Page number
	Page *float32 `json:"page,omitempty"`

	// Page size
	PageSize       *float32                                         `json:"page_size,omitempty"`
	OrderBy        *ScalewayDomainV2alpha2ListDomainsRequestOrderBy `json:"order_by,omitempty"`
	Registrar      *string                                          `json:"registrar,omitempty"`
	Status         *ScalewayDomainV2alpha2DomainStatus              `json:"status,omitempty"`
	OrganizationId *GoogleProtobufStringValue                       `json:"organization_id,omitempty"`
	IsExternal     *GoogleProtobufBoolValue                         `json:"is_external,omitempty"`
}

// BuyDomainJSONBody defines parameters for BuyDomain.
type BuyDomainJSONBody struct {
	AdministrativeContact *struct {
		Address1    *string                            `json:"address1,omitempty"`
		Address2    *string                            `json:"address2,omitempty"`
		Answer1     *string                            `json:"answer1,omitempty"`
		Answer2     *string                            `json:"answer2,omitempty"`
		Answer3     *string                            `json:"answer3,omitempty"`
		Answer4     *string                            `json:"answer4,omitempty"`
		Answer5     *string                            `json:"answer5,omitempty"`
		City        *string                            `json:"city,omitempty"`
		Civility    *ScalewayDomainV2alpha2Civility    `json:"civility,omitempty"`
		CompanyName *string                            `json:"company_name,omitempty"`
		Country     *string                            `json:"country,omitempty"`
		Email       *string                            `json:"email,omitempty"`
		EmailAlt    *string                            `json:"email_alt,omitempty"`
		ExtensionEu *ScalewayDomainV2alpha2ExtensionEU `json:"extension_eu,omitempty"`
		ExtensionFr *ScalewayDomainV2alpha2ExtensionFR `json:"extension_fr,omitempty"`
		FaxNumber   *string                            `json:"fax_number,omitempty"`
		Firstname   *string                            `json:"firstname,omitempty"`
		Lang        *ScalewayDomainV2alpha2Lang        `json:"lang,omitempty"`
		Lastname    *string                            `json:"lastname,omitempty"`
		LegalForm   *ScalewayDomainV2alpha2LegalForm   `json:"legal_form,omitempty"`
		PhoneNumber *string                            `json:"phone_number,omitempty"`
		Question1   *string                            `json:"question1,omitempty"`
		Question2   *string                            `json:"question2,omitempty"`
		Question3   *string                            `json:"question3,omitempty"`
		Question4   *string                            `json:"question4,omitempty"`
		Question5   *string                            `json:"question5,omitempty"`
		Resale      *bool                              `json:"resale,omitempty"`
		Siret       *string                            `json:"siret,omitempty"`
		Vat         *string                            `json:"vat,omitempty"`
		WhoisOptOut *bool                              `json:"whois_opt_out,omitempty"`
		Zip         *string                            `json:"zip,omitempty"`
	} `json:"administrative_contact,omitempty"`
	AdministrativeContactId *string `json:"administrative_contact_id,omitempty"`
	Contact                 *struct {
		Address1    *string                            `json:"address1,omitempty"`
		Address2    *string                            `json:"address2,omitempty"`
		Answer1     *string                            `json:"answer1,omitempty"`
		Answer2     *string                            `json:"answer2,omitempty"`
		Answer3     *string                            `json:"answer3,omitempty"`
		Answer4     *string                            `json:"answer4,omitempty"`
		Answer5     *string                            `json:"answer5,omitempty"`
		City        *string                            `json:"city,omitempty"`
		Civility    *ScalewayDomainV2alpha2Civility    `json:"civility,omitempty"`
		CompanyName *string                            `json:"company_name,omitempty"`
		Country     *string                            `json:"country,omitempty"`
		Email       *string                            `json:"email,omitempty"`
		EmailAlt    *string                            `json:"email_alt,omitempty"`
		ExtensionEu *ScalewayDomainV2alpha2ExtensionEU `json:"extension_eu,omitempty"`
		ExtensionFr *ScalewayDomainV2alpha2ExtensionFR `json:"extension_fr,omitempty"`
		FaxNumber   *string                            `json:"fax_number,omitempty"`
		Firstname   *string                            `json:"firstname,omitempty"`
		Lang        *ScalewayDomainV2alpha2Lang        `json:"lang,omitempty"`
		Lastname    *string                            `json:"lastname,omitempty"`
		LegalForm   *ScalewayDomainV2alpha2LegalForm   `json:"legal_form,omitempty"`
		PhoneNumber *string                            `json:"phone_number,omitempty"`
		Question1   *string                            `json:"question1,omitempty"`
		Question2   *string                            `json:"question2,omitempty"`
		Question3   *string                            `json:"question3,omitempty"`
		Question4   *string                            `json:"question4,omitempty"`
		Question5   *string                            `json:"question5,omitempty"`
		Resale      *bool                              `json:"resale,omitempty"`
		Siret       *string                            `json:"siret,omitempty"`
		Vat         *string                            `json:"vat,omitempty"`
		WhoisOptOut *bool                              `json:"whois_opt_out,omitempty"`
		Zip         *string                            `json:"zip,omitempty"`
	} `json:"contact,omitempty"`
	ContactId        *string  `json:"contact_id,omitempty"`
	Domain           *string  `json:"domain,omitempty"`
	OrganizationId   *string  `json:"organization_id,omitempty"`
	Period           *float32 `json:"period,omitempty"`
	TechnicalContact *struct {
		Address1    *string                            `json:"address1,omitempty"`
		Address2    *string                            `json:"address2,omitempty"`
		Answer1     *string                            `json:"answer1,omitempty"`
		Answer2     *string                            `json:"answer2,omitempty"`
		Answer3     *string                            `json:"answer3,omitempty"`
		Answer4     *string                            `json:"answer4,omitempty"`
		Answer5     *string                            `json:"answer5,omitempty"`
		City        *string                            `json:"city,omitempty"`
		Civility    *ScalewayDomainV2alpha2Civility    `json:"civility,omitempty"`
		CompanyName *string                            `json:"company_name,omitempty"`
		Country     *string                            `json:"country,omitempty"`
		Email       *string                            `json:"email,omitempty"`
		EmailAlt    *string                            `json:"email_alt,omitempty"`
		ExtensionEu *ScalewayDomainV2alpha2ExtensionEU `json:"extension_eu,omitempty"`
		ExtensionFr *ScalewayDomainV2alpha2ExtensionFR `json:"extension_fr,omitempty"`
		FaxNumber   *string                            `json:"fax_number,omitempty"`
		Firstname   *string                            `json:"firstname,omitempty"`
		Lang        *ScalewayDomainV2alpha2Lang        `json:"lang,omitempty"`
		Lastname    *string                            `json:"lastname,omitempty"`
		LegalForm   *ScalewayDomainV2alpha2LegalForm   `json:"legal_form,omitempty"`
		PhoneNumber *string                            `json:"phone_number,omitempty"`
		Question1   *string                            `json:"question1,omitempty"`
		Question2   *string                            `json:"question2,omitempty"`
		Question3   *string                            `json:"question3,omitempty"`
		Question4   *string                            `json:"question4,omitempty"`
		Question5   *string                            `json:"question5,omitempty"`
		Resale      *bool                              `json:"resale,omitempty"`
		Siret       *string                            `json:"siret,omitempty"`
		Vat         *string                            `json:"vat,omitempty"`
		WhoisOptOut *bool                              `json:"whois_opt_out,omitempty"`
		Zip         *string                            `json:"zip,omitempty"`
	} `json:"technical_contact,omitempty"`
	TechnicalContactId *string `json:"technical_contact_id,omitempty"`
}

// RegisterExternalDomainJSONBody defines parameters for RegisterExternalDomain.
type RegisterExternalDomainJSONBody struct {
	Domain         *string `json:"domain,omitempty"`
	OrganizationId *string `json:"organization_id,omitempty"`
}

// TransferDomainJSONBody defines parameters for TransferDomain.
type TransferDomainJSONBody struct {
	AdministrativeContact *struct {
		Address1    *string                            `json:"address1,omitempty"`
		Address2    *string                            `json:"address2,omitempty"`
		Answer1     *string                            `json:"answer1,omitempty"`
		Answer2     *string                            `json:"answer2,omitempty"`
		Answer3     *string                            `json:"answer3,omitempty"`
		Answer4     *string                            `json:"answer4,omitempty"`
		Answer5     *string                            `json:"answer5,omitempty"`
		City        *string                            `json:"city,omitempty"`
		Civility    *ScalewayDomainV2alpha2Civility    `json:"civility,omitempty"`
		CompanyName *string                            `json:"company_name,omitempty"`
		Country     *string                            `json:"country,omitempty"`
		Email       *string                            `json:"email,omitempty"`
		EmailAlt    *string                            `json:"email_alt,omitempty"`
		ExtensionEu *ScalewayDomainV2alpha2ExtensionEU `json:"extension_eu,omitempty"`
		ExtensionFr *ScalewayDomainV2alpha2ExtensionFR `json:"extension_fr,omitempty"`
		FaxNumber   *string                            `json:"fax_number,omitempty"`
		Firstname   *string                            `json:"firstname,omitempty"`
		Lang        *ScalewayDomainV2alpha2Lang        `json:"lang,omitempty"`
		Lastname    *string                            `json:"lastname,omitempty"`
		LegalForm   *ScalewayDomainV2alpha2LegalForm   `json:"legal_form,omitempty"`
		PhoneNumber *string                            `json:"phone_number,omitempty"`
		Question1   *string                            `json:"question1,omitempty"`
		Question2   *string                            `json:"question2,omitempty"`
		Question3   *string                            `json:"question3,omitempty"`
		Question4   *string                            `json:"question4,omitempty"`
		Question5   *string                            `json:"question5,omitempty"`
		Resale      *bool                              `json:"resale,omitempty"`
		Siret       *string                            `json:"siret,omitempty"`
		Vat         *string                            `json:"vat,omitempty"`
		WhoisOptOut *bool                              `json:"whois_opt_out,omitempty"`
		Zip         *string                            `json:"zip,omitempty"`
	} `json:"administrative_contact,omitempty"`
	AdministrativeContactId *string `json:"administrative_contact_id,omitempty"`
	AuthCode                *string `json:"auth_code,omitempty"`
	Contact                 *struct {
		Address1    *string                            `json:"address1,omitempty"`
		Address2    *string                            `json:"address2,omitempty"`
		Answer1     *string                            `json:"answer1,omitempty"`
		Answer2     *string                            `json:"answer2,omitempty"`
		Answer3     *string                            `json:"answer3,omitempty"`
		Answer4     *string                            `json:"answer4,omitempty"`
		Answer5     *string                            `json:"answer5,omitempty"`
		City        *string                            `json:"city,omitempty"`
		Civility    *ScalewayDomainV2alpha2Civility    `json:"civility,omitempty"`
		CompanyName *string                            `json:"company_name,omitempty"`
		Country     *string                            `json:"country,omitempty"`
		Email       *string                            `json:"email,omitempty"`
		EmailAlt    *string                            `json:"email_alt,omitempty"`
		ExtensionEu *ScalewayDomainV2alpha2ExtensionEU `json:"extension_eu,omitempty"`
		ExtensionFr *ScalewayDomainV2alpha2ExtensionFR `json:"extension_fr,omitempty"`
		FaxNumber   *string                            `json:"fax_number,omitempty"`
		Firstname   *string                            `json:"firstname,omitempty"`
		Lang        *ScalewayDomainV2alpha2Lang        `json:"lang,omitempty"`
		Lastname    *string                            `json:"lastname,omitempty"`
		LegalForm   *ScalewayDomainV2alpha2LegalForm   `json:"legal_form,omitempty"`
		PhoneNumber *string                            `json:"phone_number,omitempty"`
		Question1   *string                            `json:"question1,omitempty"`
		Question2   *string                            `json:"question2,omitempty"`
		Question3   *string                            `json:"question3,omitempty"`
		Question4   *string                            `json:"question4,omitempty"`
		Question5   *string                            `json:"question5,omitempty"`
		Resale      *bool                              `json:"resale,omitempty"`
		Siret       *string                            `json:"siret,omitempty"`
		Vat         *string                            `json:"vat,omitempty"`
		WhoisOptOut *bool                              `json:"whois_opt_out,omitempty"`
		Zip         *string                            `json:"zip,omitempty"`
	} `json:"contact,omitempty"`
	ContactId        *string `json:"contact_id,omitempty"`
	Domain           *string `json:"domain,omitempty"`
	OrganizationId   *string `json:"organization_id,omitempty"`
	TechnicalContact *struct {
		Address1    *string                            `json:"address1,omitempty"`
		Address2    *string                            `json:"address2,omitempty"`
		Answer1     *string                            `json:"answer1,omitempty"`
		Answer2     *string                            `json:"answer2,omitempty"`
		Answer3     *string                            `json:"answer3,omitempty"`
		Answer4     *string                            `json:"answer4,omitempty"`
		Answer5     *string                            `json:"answer5,omitempty"`
		City        *string                            `json:"city,omitempty"`
		Civility    *ScalewayDomainV2alpha2Civility    `json:"civility,omitempty"`
		CompanyName *string                            `json:"company_name,omitempty"`
		Country     *string                            `json:"country,omitempty"`
		Email       *string                            `json:"email,omitempty"`
		EmailAlt    *string                            `json:"email_alt,omitempty"`
		ExtensionEu *ScalewayDomainV2alpha2ExtensionEU `json:"extension_eu,omitempty"`
		ExtensionFr *ScalewayDomainV2alpha2ExtensionFR `json:"extension_fr,omitempty"`
		FaxNumber   *string                            `json:"fax_number,omitempty"`
		Firstname   *string                            `json:"firstname,omitempty"`
		Lang        *ScalewayDomainV2alpha2Lang        `json:"lang,omitempty"`
		Lastname    *string                            `json:"lastname,omitempty"`
		LegalForm   *ScalewayDomainV2alpha2LegalForm   `json:"legal_form,omitempty"`
		PhoneNumber *string                            `json:"phone_number,omitempty"`
		Question1   *string                            `json:"question1,omitempty"`
		Question2   *string                            `json:"question2,omitempty"`
		Question3   *string                            `json:"question3,omitempty"`
		Question4   *string                            `json:"question4,omitempty"`
		Question5   *string                            `json:"question5,omitempty"`
		Resale      *bool                              `json:"resale,omitempty"`
		Siret       *string                            `json:"siret,omitempty"`
		Vat         *string                            `json:"vat,omitempty"`
		WhoisOptOut *bool                              `json:"whois_opt_out,omitempty"`
		Zip         *string                            `json:"zip,omitempty"`
	} `json:"technical_contact,omitempty"`
	TechnicalContactId *string `json:"technical_contact_id,omitempty"`
}

// UpdateDomainJSONBody defines parameters for UpdateDomain.
type UpdateDomainJSONBody struct {
	AdministrativeContact *struct {
		Address1    *string                            `json:"address1,omitempty"`
		Address2    *string                            `json:"address2,omitempty"`
		Answer1     *string                            `json:"answer1,omitempty"`
		Answer2     *string                            `json:"answer2,omitempty"`
		Answer3     *string                            `json:"answer3,omitempty"`
		Answer4     *string                            `json:"answer4,omitempty"`
		Answer5     *string                            `json:"answer5,omitempty"`
		City        *string                            `json:"city,omitempty"`
		Civility    *ScalewayDomainV2alpha2Civility    `json:"civility,omitempty"`
		CompanyName *string                            `json:"company_name,omitempty"`
		Country     *string                            `json:"country,omitempty"`
		Email       *string                            `json:"email,omitempty"`
		EmailAlt    *string                            `json:"email_alt,omitempty"`
		ExtensionEu *ScalewayDomainV2alpha2ExtensionEU `json:"extension_eu,omitempty"`
		ExtensionFr *ScalewayDomainV2alpha2ExtensionFR `json:"extension_fr,omitempty"`
		FaxNumber   *string                            `json:"fax_number,omitempty"`
		Firstname   *string                            `json:"firstname,omitempty"`
		Lang        *ScalewayDomainV2alpha2Lang        `json:"lang,omitempty"`
		Lastname    *string                            `json:"lastname,omitempty"`
		LegalForm   *ScalewayDomainV2alpha2LegalForm   `json:"legal_form,omitempty"`
		PhoneNumber *string                            `json:"phone_number,omitempty"`
		Question1   *string                            `json:"question1,omitempty"`
		Question2   *string                            `json:"question2,omitempty"`
		Question3   *string                            `json:"question3,omitempty"`
		Question4   *string                            `json:"question4,omitempty"`
		Question5   *string                            `json:"question5,omitempty"`
		Resale      *bool                              `json:"resale,omitempty"`
		Siret       *string                            `json:"siret,omitempty"`
		Vat         *string                            `json:"vat,omitempty"`
		WhoisOptOut *bool                              `json:"whois_opt_out,omitempty"`
		Zip         *string                            `json:"zip,omitempty"`
	} `json:"administrative_contact,omitempty"`
	AdministrativeContactId *string `json:"administrative_contact_id,omitempty"`
	OwnerContact            *struct {
		Address1    *string                            `json:"address1,omitempty"`
		Address2    *string                            `json:"address2,omitempty"`
		Answer1     *string                            `json:"answer1,omitempty"`
		Answer2     *string                            `json:"answer2,omitempty"`
		Answer3     *string                            `json:"answer3,omitempty"`
		Answer4     *string                            `json:"answer4,omitempty"`
		Answer5     *string                            `json:"answer5,omitempty"`
		City        *string                            `json:"city,omitempty"`
		Civility    *ScalewayDomainV2alpha2Civility    `json:"civility,omitempty"`
		CompanyName *string                            `json:"company_name,omitempty"`
		Country     *string                            `json:"country,omitempty"`
		Email       *string                            `json:"email,omitempty"`
		EmailAlt    *string                            `json:"email_alt,omitempty"`
		ExtensionEu *ScalewayDomainV2alpha2ExtensionEU `json:"extension_eu,omitempty"`
		ExtensionFr *ScalewayDomainV2alpha2ExtensionFR `json:"extension_fr,omitempty"`
		FaxNumber   *string                            `json:"fax_number,omitempty"`
		Firstname   *string                            `json:"firstname,omitempty"`
		Lang        *ScalewayDomainV2alpha2Lang        `json:"lang,omitempty"`
		Lastname    *string                            `json:"lastname,omitempty"`
		LegalForm   *ScalewayDomainV2alpha2LegalForm   `json:"legal_form,omitempty"`
		PhoneNumber *string                            `json:"phone_number,omitempty"`
		Question1   *string                            `json:"question1,omitempty"`
		Question2   *string                            `json:"question2,omitempty"`
		Question3   *string                            `json:"question3,omitempty"`
		Question4   *string                            `json:"question4,omitempty"`
		Question5   *string                            `json:"question5,omitempty"`
		Resale      *bool                              `json:"resale,omitempty"`
		Siret       *string                            `json:"siret,omitempty"`
		Vat         *string                            `json:"vat,omitempty"`
		WhoisOptOut *bool                              `json:"whois_opt_out,omitempty"`
		Zip         *string                            `json:"zip,omitempty"`
	} `json:"owner_contact,omitempty"`
	OwnerContactId   *string `json:"owner_contact_id,omitempty"`
	TechnicalContact *struct {
		Address1    *string                            `json:"address1,omitempty"`
		Address2    *string                            `json:"address2,omitempty"`
		Answer1     *string                            `json:"answer1,omitempty"`
		Answer2     *string                            `json:"answer2,omitempty"`
		Answer3     *string                            `json:"answer3,omitempty"`
		Answer4     *string                            `json:"answer4,omitempty"`
		Answer5     *string                            `json:"answer5,omitempty"`
		City        *string                            `json:"city,omitempty"`
		Civility    *ScalewayDomainV2alpha2Civility    `json:"civility,omitempty"`
		CompanyName *string                            `json:"company_name,omitempty"`
		Country     *string                            `json:"country,omitempty"`
		Email       *string                            `json:"email,omitempty"`
		EmailAlt    *string                            `json:"email_alt,omitempty"`
		ExtensionEu *ScalewayDomainV2alpha2ExtensionEU `json:"extension_eu,omitempty"`
		ExtensionFr *ScalewayDomainV2alpha2ExtensionFR `json:"extension_fr,omitempty"`
		FaxNumber   *string                            `json:"fax_number,omitempty"`
		Firstname   *string                            `json:"firstname,omitempty"`
		Lang        *ScalewayDomainV2alpha2Lang        `json:"lang,omitempty"`
		Lastname    *string                            `json:"lastname,omitempty"`
		LegalForm   *ScalewayDomainV2alpha2LegalForm   `json:"legal_form,omitempty"`
		PhoneNumber *string                            `json:"phone_number,omitempty"`
		Question1   *string                            `json:"question1,omitempty"`
		Question2   *string                            `json:"question2,omitempty"`
		Question3   *string                            `json:"question3,omitempty"`
		Question4   *string                            `json:"question4,omitempty"`
		Question5   *string                            `json:"question5,omitempty"`
		Resale      *bool                              `json:"resale,omitempty"`
		Siret       *string                            `json:"siret,omitempty"`
		Vat         *string                            `json:"vat,omitempty"`
		WhoisOptOut *bool                              `json:"whois_opt_out,omitempty"`
		Zip         *string                            `json:"zip,omitempty"`
	} `json:"technical_contact,omitempty"`
	TechnicalContactId *string `json:"technical_contact_id,omitempty"`
}

// DisableDomainAutoRenewJSONBody defines parameters for DisableDomainAutoRenew.
type DisableDomainAutoRenewJSONBody map[string]interface{}

// DisableDomainDNSSECJSONBody defines parameters for DisableDomainDNSSEC.
type DisableDomainDNSSECJSONBody map[string]interface{}

// EnableDomainAutoRenewJSONBody defines parameters for EnableDomainAutoRenew.
type EnableDomainAutoRenewJSONBody map[string]interface{}

// EnableDomainDNSSECJSONBody defines parameters for EnableDomainDNSSEC.
type EnableDomainDNSSECJSONBody struct {
	DsRecord *ScalewayDomainV2alpha2DSRecord `json:"ds_record,omitempty"`
}

// LockDomainTransferJSONBody defines parameters for LockDomainTransfer.
type LockDomainTransferJSONBody map[string]interface{}

// RenewDomainJSONBody defines parameters for RenewDomain.
type RenewDomainJSONBody struct {
	Period *float32 `json:"period,omitempty"`
}

// TradeDomainJSONBody defines parameters for TradeDomain.
type TradeDomainJSONBody struct {
	Contact *struct {
		Address1    *string                            `json:"address1,omitempty"`
		Address2    *string                            `json:"address2,omitempty"`
		Answer1     *string                            `json:"answer1,omitempty"`
		Answer2     *string                            `json:"answer2,omitempty"`
		Answer3     *string                            `json:"answer3,omitempty"`
		Answer4     *string                            `json:"answer4,omitempty"`
		Answer5     *string                            `json:"answer5,omitempty"`
		City        *string                            `json:"city,omitempty"`
		Civility    *ScalewayDomainV2alpha2Civility    `json:"civility,omitempty"`
		CompanyName *string                            `json:"company_name,omitempty"`
		Country     *string                            `json:"country,omitempty"`
		Email       *string                            `json:"email,omitempty"`
		EmailAlt    *string                            `json:"email_alt,omitempty"`
		ExtensionEu *ScalewayDomainV2alpha2ExtensionEU `json:"extension_eu,omitempty"`
		ExtensionFr *ScalewayDomainV2alpha2ExtensionFR `json:"extension_fr,omitempty"`
		FaxNumber   *string                            `json:"fax_number,omitempty"`
		Firstname   *string                            `json:"firstname,omitempty"`
		Lang        *ScalewayDomainV2alpha2Lang        `json:"lang,omitempty"`
		Lastname    *string                            `json:"lastname,omitempty"`
		LegalForm   *ScalewayDomainV2alpha2LegalForm   `json:"legal_form,omitempty"`
		PhoneNumber *string                            `json:"phone_number,omitempty"`
		Question1   *string                            `json:"question1,omitempty"`
		Question2   *string                            `json:"question2,omitempty"`
		Question3   *string                            `json:"question3,omitempty"`
		Question4   *string                            `json:"question4,omitempty"`
		Question5   *string                            `json:"question5,omitempty"`
		Resale      *bool                              `json:"resale,omitempty"`
		Siret       *string                            `json:"siret,omitempty"`
		Vat         *string                            `json:"vat,omitempty"`
		WhoisOptOut *bool                              `json:"whois_opt_out,omitempty"`
		Zip         *string                            `json:"zip,omitempty"`
	} `json:"contact,omitempty"`
	ContactId      *string                    `json:"contact_id,omitempty"`
	OrganizationId *GoogleProtobufStringValue `json:"organization_id"`
}

// UnlockDomainTransferJSONBody defines parameters for UnlockDomainTransfer.
type UnlockDomainTransferJSONBody map[string]interface{}

// ListSSLCertificatesParams defines parameters for ListSSLCertificates.
type ListSSLCertificatesParams struct {

	// Page number
	Page *float32 `json:"page,omitempty"`

	// Page size
	PageSize       *float32                   `json:"page_size,omitempty"`
	DnsZone        *string                    `json:"dns_zone,omitempty"`
	OrganizationId *GoogleProtobufStringValue `json:"organization_id,omitempty"`
}

// CreateSSLCertificateJSONBody defines parameters for CreateSSLCertificate.
type CreateSSLCertificateJSONBody struct {
	AlternativeDnsZones *[]string `json:"alternative_dns_zones,omitempty"`
	DnsZone             *string   `json:"dns_zone,omitempty"`
}

// ListTasksParams defines parameters for ListTasks.
type ListTasksParams struct {

	// Page number
	Page *float32 `json:"page,omitempty"`

	// Page size
	PageSize       *float32                   `json:"page_size,omitempty"`
	Domain         *string                    `json:"domain,omitempty"`
	OrganizationId *GoogleProtobufStringValue `json:"organization_id,omitempty"`
}

// UpdateContactRequestBody defines body for UpdateContact for application/json ContentType.
type UpdateContactJSONRequestBody UpdateContactJSONBody

// CreateDNSZoneRequestBody defines body for CreateDNSZone for application/json ContentType.
type CreateDNSZoneJSONRequestBody CreateDNSZoneJSONBody

// UpdateDNSZoneRequestBody defines body for UpdateDNSZone for application/json ContentType.
type UpdateDNSZoneJSONRequestBody UpdateDNSZoneJSONBody

// CopyDNSZoneRequestBody defines body for CopyDNSZone for application/json ContentType.
type CopyDNSZoneJSONRequestBody CopyDNSZoneJSONBody

// ImportProviderDNSZoneRequestBody defines body for ImportProviderDNSZone for application/json ContentType.
type ImportProviderDNSZoneJSONRequestBody ImportProviderDNSZoneJSONBody

// UpdateDNSZoneNameserversRequestBody defines body for UpdateDNSZoneNameservers for application/json ContentType.
type UpdateDNSZoneNameserversJSONRequestBody UpdateDNSZoneNameserversJSONBody

// ImportRawDNSZoneRequestBody defines body for ImportRawDNSZone for application/json ContentType.
type ImportRawDNSZoneJSONRequestBody ImportRawDNSZoneJSONBody

// UpdateDNSZoneRecordsRequestBody defines body for UpdateDNSZoneRecords for application/json ContentType.
type UpdateDNSZoneRecordsJSONRequestBody UpdateDNSZoneRecordsJSONBody

// RefreshDNSZoneRequestBody defines body for RefreshDNSZone for application/json ContentType.
type RefreshDNSZoneJSONRequestBody RefreshDNSZoneJSONBody

// RestoreDNSZoneVersionRequestBody defines body for RestoreDNSZoneVersion for application/json ContentType.
type RestoreDNSZoneVersionJSONRequestBody RestoreDNSZoneVersionJSONBody

// BuyDomainRequestBody defines body for BuyDomain for application/json ContentType.
type BuyDomainJSONRequestBody BuyDomainJSONBody

// RegisterExternalDomainRequestBody defines body for RegisterExternalDomain for application/json ContentType.
type RegisterExternalDomainJSONRequestBody RegisterExternalDomainJSONBody

// TransferDomainRequestBody defines body for TransferDomain for application/json ContentType.
type TransferDomainJSONRequestBody TransferDomainJSONBody

// UpdateDomainRequestBody defines body for UpdateDomain for application/json ContentType.
type UpdateDomainJSONRequestBody UpdateDomainJSONBody

// DisableDomainAutoRenewRequestBody defines body for DisableDomainAutoRenew for application/json ContentType.
type DisableDomainAutoRenewJSONRequestBody DisableDomainAutoRenewJSONBody

// DisableDomainDNSSECRequestBody defines body for DisableDomainDNSSEC for application/json ContentType.
type DisableDomainDNSSECJSONRequestBody DisableDomainDNSSECJSONBody

// EnableDomainAutoRenewRequestBody defines body for EnableDomainAutoRenew for application/json ContentType.
type EnableDomainAutoRenewJSONRequestBody EnableDomainAutoRenewJSONBody

// EnableDomainDNSSECRequestBody defines body for EnableDomainDNSSEC for application/json ContentType.
type EnableDomainDNSSECJSONRequestBody EnableDomainDNSSECJSONBody

// LockDomainTransferRequestBody defines body for LockDomainTransfer for application/json ContentType.
type LockDomainTransferJSONRequestBody LockDomainTransferJSONBody

// RenewDomainRequestBody defines body for RenewDomain for application/json ContentType.
type RenewDomainJSONRequestBody RenewDomainJSONBody

// TradeDomainRequestBody defines body for TradeDomain for application/json ContentType.
type TradeDomainJSONRequestBody TradeDomainJSONBody

// UnlockDomainTransferRequestBody defines body for UnlockDomainTransfer for application/json ContentType.
type UnlockDomainTransferJSONRequestBody UnlockDomainTransferJSONBody

// CreateSSLCertificateRequestBody defines body for CreateSSLCertificate for application/json ContentType.
type CreateSSLCertificateJSONRequestBody CreateSSLCertificateJSONBody

// Getter for additional properties for ScalewayDomainV2alpha2ContactRoles_Roles. Returns the specified
// element and whether it was found
func (a ScalewayDomainV2alpha2ContactRoles_Roles) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ScalewayDomainV2alpha2ContactRoles_Roles
func (a *ScalewayDomainV2alpha2ContactRoles_Roles) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ScalewayDomainV2alpha2ContactRoles_Roles to handle AdditionalProperties
func (a *ScalewayDomainV2alpha2ContactRoles_Roles) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["<roleKey>"]; found {
		err = json.Unmarshal(raw, &a.roleKey)
		if err != nil {
			return errors.Wrap(err, "error reading '<roleKey>'")
		}
		delete(object, "<roleKey>")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ScalewayDomainV2alpha2ContactRoles_Roles to handle AdditionalProperties
func (a ScalewayDomainV2alpha2ContactRoles_Roles) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.roleKey != nil {
		object["<roleKey>"], err = json.Marshal(a.roleKey)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '<roleKey>'"))
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A callback for modifying requests which are generated before sending over
	// the network.
	RequestEditor RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = http.DefaultClient
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditor = fn
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// ListContacts request
	ListContacts(ctx context.Context, params *ListContactsParams) (*http.Response, error)

	// GetContact request
	GetContact(ctx context.Context, contactId string) (*http.Response, error)

	// UpdateContact request  with any body
	UpdateContactWithBody(ctx context.Context, contactId string, contentType string, body io.Reader) (*http.Response, error)

	UpdateContact(ctx context.Context, contactId string, body UpdateContactJSONRequestBody) (*http.Response, error)

	// ListDNSZones request
	ListDNSZones(ctx context.Context, params *ListDNSZonesParams) (*http.Response, error)

	// CreateDNSZone request  with any body
	CreateDNSZoneWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	CreateDNSZone(ctx context.Context, body CreateDNSZoneJSONRequestBody) (*http.Response, error)

	// DeleteDNSZone request
	DeleteDNSZone(ctx context.Context, dnsZone string) (*http.Response, error)

	// UpdateDNSZone request  with any body
	UpdateDNSZoneWithBody(ctx context.Context, dnsZone string, contentType string, body io.Reader) (*http.Response, error)

	UpdateDNSZone(ctx context.Context, dnsZone string, body UpdateDNSZoneJSONRequestBody) (*http.Response, error)

	// CopyDNSZone request  with any body
	CopyDNSZoneWithBody(ctx context.Context, dnsZone string, contentType string, body io.Reader) (*http.Response, error)

	CopyDNSZone(ctx context.Context, dnsZone string, body CopyDNSZoneJSONRequestBody) (*http.Response, error)

	// ImportProviderDNSZone request  with any body
	ImportProviderDNSZoneWithBody(ctx context.Context, dnsZone string, contentType string, body io.Reader) (*http.Response, error)

	ImportProviderDNSZone(ctx context.Context, dnsZone string, body ImportProviderDNSZoneJSONRequestBody) (*http.Response, error)

	// ListDNSZoneNameservers request
	ListDNSZoneNameservers(ctx context.Context, dnsZone string, params *ListDNSZoneNameserversParams) (*http.Response, error)

	// UpdateDNSZoneNameservers request  with any body
	UpdateDNSZoneNameserversWithBody(ctx context.Context, dnsZone string, contentType string, body io.Reader) (*http.Response, error)

	UpdateDNSZoneNameservers(ctx context.Context, dnsZone string, body UpdateDNSZoneNameserversJSONRequestBody) (*http.Response, error)

	// ExportRawDNSZone request
	ExportRawDNSZone(ctx context.Context, dnsZone string, params *ExportRawDNSZoneParams) (*http.Response, error)

	// ImportRawDNSZone request  with any body
	ImportRawDNSZoneWithBody(ctx context.Context, dnsZone string, contentType string, body io.Reader) (*http.Response, error)

	ImportRawDNSZone(ctx context.Context, dnsZone string, body ImportRawDNSZoneJSONRequestBody) (*http.Response, error)

	// ClearDNSZoneRecords request
	ClearDNSZoneRecords(ctx context.Context, dnsZone string) (*http.Response, error)

	// ListDNSZoneRecords request
	ListDNSZoneRecords(ctx context.Context, dnsZone string, params *ListDNSZoneRecordsParams) (*http.Response, error)

	// UpdateDNSZoneRecords request  with any body
	UpdateDNSZoneRecordsWithBody(ctx context.Context, dnsZone string, contentType string, body io.Reader) (*http.Response, error)

	UpdateDNSZoneRecords(ctx context.Context, dnsZone string, body UpdateDNSZoneRecordsJSONRequestBody) (*http.Response, error)

	// RefreshDNSZone request  with any body
	RefreshDNSZoneWithBody(ctx context.Context, dnsZone string, contentType string, body io.Reader) (*http.Response, error)

	RefreshDNSZone(ctx context.Context, dnsZone string, body RefreshDNSZoneJSONRequestBody) (*http.Response, error)

	// GetDNSZoneTsigKey request
	GetDNSZoneTsigKey(ctx context.Context, dnsZone string) (*http.Response, error)

	// DeleteDNSZoneTsigKey request
	DeleteDNSZoneTsigKey(ctx context.Context, dnsZone string, id string) (*http.Response, error)

	// ListDNSZoneVersions request
	ListDNSZoneVersions(ctx context.Context, dnsZone string, params *ListDNSZoneVersionsParams) (*http.Response, error)

	// GetDNSZoneVersionDiff request
	GetDNSZoneVersionDiff(ctx context.Context, dnsZone string, version string) (*http.Response, error)

	// ListDNSZoneVersionRecords request
	ListDNSZoneVersionRecords(ctx context.Context, dnsZone string, version string, params *ListDNSZoneVersionRecordsParams) (*http.Response, error)

	// RestoreDNSZoneVersion request  with any body
	RestoreDNSZoneVersionWithBody(ctx context.Context, dnsZone string, version string, contentType string, body io.Reader) (*http.Response, error)

	RestoreDNSZoneVersion(ctx context.Context, dnsZone string, version string, body RestoreDNSZoneVersionJSONRequestBody) (*http.Response, error)

	// ListDomains request
	ListDomains(ctx context.Context, params *ListDomainsParams) (*http.Response, error)

	// BuyDomain request  with any body
	BuyDomainWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	BuyDomain(ctx context.Context, body BuyDomainJSONRequestBody) (*http.Response, error)

	// RegisterExternalDomain request  with any body
	RegisterExternalDomainWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	RegisterExternalDomain(ctx context.Context, body RegisterExternalDomainJSONRequestBody) (*http.Response, error)

	// DeleteExternalDomain request
	DeleteExternalDomain(ctx context.Context, domain string) (*http.Response, error)

	// TransferDomain request  with any body
	TransferDomainWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	TransferDomain(ctx context.Context, body TransferDomainJSONRequestBody) (*http.Response, error)

	// GetDomain request
	GetDomain(ctx context.Context, domain string) (*http.Response, error)

	// UpdateDomain request  with any body
	UpdateDomainWithBody(ctx context.Context, domain string, contentType string, body io.Reader) (*http.Response, error)

	UpdateDomain(ctx context.Context, domain string, body UpdateDomainJSONRequestBody) (*http.Response, error)

	// GetDomainAuthCode request
	GetDomainAuthCode(ctx context.Context, domain string) (*http.Response, error)

	// DisableDomainAutoRenew request  with any body
	DisableDomainAutoRenewWithBody(ctx context.Context, domain string, contentType string, body io.Reader) (*http.Response, error)

	DisableDomainAutoRenew(ctx context.Context, domain string, body DisableDomainAutoRenewJSONRequestBody) (*http.Response, error)

	// DisableDomainDNSSEC request  with any body
	DisableDomainDNSSECWithBody(ctx context.Context, domain string, contentType string, body io.Reader) (*http.Response, error)

	DisableDomainDNSSEC(ctx context.Context, domain string, body DisableDomainDNSSECJSONRequestBody) (*http.Response, error)

	// EnableDomainAutoRenew request  with any body
	EnableDomainAutoRenewWithBody(ctx context.Context, domain string, contentType string, body io.Reader) (*http.Response, error)

	EnableDomainAutoRenew(ctx context.Context, domain string, body EnableDomainAutoRenewJSONRequestBody) (*http.Response, error)

	// EnableDomainDNSSEC request  with any body
	EnableDomainDNSSECWithBody(ctx context.Context, domain string, contentType string, body io.Reader) (*http.Response, error)

	EnableDomainDNSSEC(ctx context.Context, domain string, body EnableDomainDNSSECJSONRequestBody) (*http.Response, error)

	// LockDomainTransfer request  with any body
	LockDomainTransferWithBody(ctx context.Context, domain string, contentType string, body io.Reader) (*http.Response, error)

	LockDomainTransfer(ctx context.Context, domain string, body LockDomainTransferJSONRequestBody) (*http.Response, error)

	// RenewDomain request  with any body
	RenewDomainWithBody(ctx context.Context, domain string, contentType string, body io.Reader) (*http.Response, error)

	RenewDomain(ctx context.Context, domain string, body RenewDomainJSONRequestBody) (*http.Response, error)

	// TradeDomain request  with any body
	TradeDomainWithBody(ctx context.Context, domain string, contentType string, body io.Reader) (*http.Response, error)

	TradeDomain(ctx context.Context, domain string, body TradeDomainJSONRequestBody) (*http.Response, error)

	// UnlockDomainTransfer request  with any body
	UnlockDomainTransferWithBody(ctx context.Context, domain string, contentType string, body io.Reader) (*http.Response, error)

	UnlockDomainTransfer(ctx context.Context, domain string, body UnlockDomainTransferJSONRequestBody) (*http.Response, error)

	// ListSSLCertificates request
	ListSSLCertificates(ctx context.Context, params *ListSSLCertificatesParams) (*http.Response, error)

	// CreateSSLCertificate request  with any body
	CreateSSLCertificateWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	CreateSSLCertificate(ctx context.Context, body CreateSSLCertificateJSONRequestBody) (*http.Response, error)

	// DeleteSSLCertificate request
	DeleteSSLCertificate(ctx context.Context, dnsZone string) (*http.Response, error)

	// ListTasks request
	ListTasks(ctx context.Context, params *ListTasksParams) (*http.Response, error)
}

func (c *Client) ListContacts(ctx context.Context, params *ListContactsParams) (*http.Response, error) {
	req, err := NewListContactsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetContact(ctx context.Context, contactId string) (*http.Response, error) {
	req, err := NewGetContactRequest(c.Server, contactId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateContactWithBody(ctx context.Context, contactId string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewUpdateContactRequestWithBody(c.Server, contactId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateContact(ctx context.Context, contactId string, body UpdateContactJSONRequestBody) (*http.Response, error) {
	req, err := NewUpdateContactRequest(c.Server, contactId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ListDNSZones(ctx context.Context, params *ListDNSZonesParams) (*http.Response, error) {
	req, err := NewListDNSZonesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDNSZoneWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateDNSZoneRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDNSZone(ctx context.Context, body CreateDNSZoneJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateDNSZoneRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteDNSZone(ctx context.Context, dnsZone string) (*http.Response, error) {
	req, err := NewDeleteDNSZoneRequest(c.Server, dnsZone)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateDNSZoneWithBody(ctx context.Context, dnsZone string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewUpdateDNSZoneRequestWithBody(c.Server, dnsZone, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateDNSZone(ctx context.Context, dnsZone string, body UpdateDNSZoneJSONRequestBody) (*http.Response, error) {
	req, err := NewUpdateDNSZoneRequest(c.Server, dnsZone, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CopyDNSZoneWithBody(ctx context.Context, dnsZone string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCopyDNSZoneRequestWithBody(c.Server, dnsZone, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CopyDNSZone(ctx context.Context, dnsZone string, body CopyDNSZoneJSONRequestBody) (*http.Response, error) {
	req, err := NewCopyDNSZoneRequest(c.Server, dnsZone, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ImportProviderDNSZoneWithBody(ctx context.Context, dnsZone string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewImportProviderDNSZoneRequestWithBody(c.Server, dnsZone, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ImportProviderDNSZone(ctx context.Context, dnsZone string, body ImportProviderDNSZoneJSONRequestBody) (*http.Response, error) {
	req, err := NewImportProviderDNSZoneRequest(c.Server, dnsZone, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ListDNSZoneNameservers(ctx context.Context, dnsZone string, params *ListDNSZoneNameserversParams) (*http.Response, error) {
	req, err := NewListDNSZoneNameserversRequest(c.Server, dnsZone, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateDNSZoneNameserversWithBody(ctx context.Context, dnsZone string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewUpdateDNSZoneNameserversRequestWithBody(c.Server, dnsZone, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateDNSZoneNameservers(ctx context.Context, dnsZone string, body UpdateDNSZoneNameserversJSONRequestBody) (*http.Response, error) {
	req, err := NewUpdateDNSZoneNameserversRequest(c.Server, dnsZone, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ExportRawDNSZone(ctx context.Context, dnsZone string, params *ExportRawDNSZoneParams) (*http.Response, error) {
	req, err := NewExportRawDNSZoneRequest(c.Server, dnsZone, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ImportRawDNSZoneWithBody(ctx context.Context, dnsZone string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewImportRawDNSZoneRequestWithBody(c.Server, dnsZone, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ImportRawDNSZone(ctx context.Context, dnsZone string, body ImportRawDNSZoneJSONRequestBody) (*http.Response, error) {
	req, err := NewImportRawDNSZoneRequest(c.Server, dnsZone, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ClearDNSZoneRecords(ctx context.Context, dnsZone string) (*http.Response, error) {
	req, err := NewClearDNSZoneRecordsRequest(c.Server, dnsZone)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ListDNSZoneRecords(ctx context.Context, dnsZone string, params *ListDNSZoneRecordsParams) (*http.Response, error) {
	req, err := NewListDNSZoneRecordsRequest(c.Server, dnsZone, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateDNSZoneRecordsWithBody(ctx context.Context, dnsZone string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewUpdateDNSZoneRecordsRequestWithBody(c.Server, dnsZone, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateDNSZoneRecords(ctx context.Context, dnsZone string, body UpdateDNSZoneRecordsJSONRequestBody) (*http.Response, error) {
	req, err := NewUpdateDNSZoneRecordsRequest(c.Server, dnsZone, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) RefreshDNSZoneWithBody(ctx context.Context, dnsZone string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewRefreshDNSZoneRequestWithBody(c.Server, dnsZone, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) RefreshDNSZone(ctx context.Context, dnsZone string, body RefreshDNSZoneJSONRequestBody) (*http.Response, error) {
	req, err := NewRefreshDNSZoneRequest(c.Server, dnsZone, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetDNSZoneTsigKey(ctx context.Context, dnsZone string) (*http.Response, error) {
	req, err := NewGetDNSZoneTsigKeyRequest(c.Server, dnsZone)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteDNSZoneTsigKey(ctx context.Context, dnsZone string, id string) (*http.Response, error) {
	req, err := NewDeleteDNSZoneTsigKeyRequest(c.Server, dnsZone, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ListDNSZoneVersions(ctx context.Context, dnsZone string, params *ListDNSZoneVersionsParams) (*http.Response, error) {
	req, err := NewListDNSZoneVersionsRequest(c.Server, dnsZone, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetDNSZoneVersionDiff(ctx context.Context, dnsZone string, version string) (*http.Response, error) {
	req, err := NewGetDNSZoneVersionDiffRequest(c.Server, dnsZone, version)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ListDNSZoneVersionRecords(ctx context.Context, dnsZone string, version string, params *ListDNSZoneVersionRecordsParams) (*http.Response, error) {
	req, err := NewListDNSZoneVersionRecordsRequest(c.Server, dnsZone, version, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) RestoreDNSZoneVersionWithBody(ctx context.Context, dnsZone string, version string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewRestoreDNSZoneVersionRequestWithBody(c.Server, dnsZone, version, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) RestoreDNSZoneVersion(ctx context.Context, dnsZone string, version string, body RestoreDNSZoneVersionJSONRequestBody) (*http.Response, error) {
	req, err := NewRestoreDNSZoneVersionRequest(c.Server, dnsZone, version, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ListDomains(ctx context.Context, params *ListDomainsParams) (*http.Response, error) {
	req, err := NewListDomainsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) BuyDomainWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewBuyDomainRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) BuyDomain(ctx context.Context, body BuyDomainJSONRequestBody) (*http.Response, error) {
	req, err := NewBuyDomainRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) RegisterExternalDomainWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewRegisterExternalDomainRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) RegisterExternalDomain(ctx context.Context, body RegisterExternalDomainJSONRequestBody) (*http.Response, error) {
	req, err := NewRegisterExternalDomainRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteExternalDomain(ctx context.Context, domain string) (*http.Response, error) {
	req, err := NewDeleteExternalDomainRequest(c.Server, domain)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) TransferDomainWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewTransferDomainRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) TransferDomain(ctx context.Context, body TransferDomainJSONRequestBody) (*http.Response, error) {
	req, err := NewTransferDomainRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetDomain(ctx context.Context, domain string) (*http.Response, error) {
	req, err := NewGetDomainRequest(c.Server, domain)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateDomainWithBody(ctx context.Context, domain string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewUpdateDomainRequestWithBody(c.Server, domain, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateDomain(ctx context.Context, domain string, body UpdateDomainJSONRequestBody) (*http.Response, error) {
	req, err := NewUpdateDomainRequest(c.Server, domain, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetDomainAuthCode(ctx context.Context, domain string) (*http.Response, error) {
	req, err := NewGetDomainAuthCodeRequest(c.Server, domain)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DisableDomainAutoRenewWithBody(ctx context.Context, domain string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewDisableDomainAutoRenewRequestWithBody(c.Server, domain, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DisableDomainAutoRenew(ctx context.Context, domain string, body DisableDomainAutoRenewJSONRequestBody) (*http.Response, error) {
	req, err := NewDisableDomainAutoRenewRequest(c.Server, domain, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DisableDomainDNSSECWithBody(ctx context.Context, domain string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewDisableDomainDNSSECRequestWithBody(c.Server, domain, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DisableDomainDNSSEC(ctx context.Context, domain string, body DisableDomainDNSSECJSONRequestBody) (*http.Response, error) {
	req, err := NewDisableDomainDNSSECRequest(c.Server, domain, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) EnableDomainAutoRenewWithBody(ctx context.Context, domain string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewEnableDomainAutoRenewRequestWithBody(c.Server, domain, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) EnableDomainAutoRenew(ctx context.Context, domain string, body EnableDomainAutoRenewJSONRequestBody) (*http.Response, error) {
	req, err := NewEnableDomainAutoRenewRequest(c.Server, domain, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) EnableDomainDNSSECWithBody(ctx context.Context, domain string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewEnableDomainDNSSECRequestWithBody(c.Server, domain, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) EnableDomainDNSSEC(ctx context.Context, domain string, body EnableDomainDNSSECJSONRequestBody) (*http.Response, error) {
	req, err := NewEnableDomainDNSSECRequest(c.Server, domain, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) LockDomainTransferWithBody(ctx context.Context, domain string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewLockDomainTransferRequestWithBody(c.Server, domain, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) LockDomainTransfer(ctx context.Context, domain string, body LockDomainTransferJSONRequestBody) (*http.Response, error) {
	req, err := NewLockDomainTransferRequest(c.Server, domain, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) RenewDomainWithBody(ctx context.Context, domain string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewRenewDomainRequestWithBody(c.Server, domain, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) RenewDomain(ctx context.Context, domain string, body RenewDomainJSONRequestBody) (*http.Response, error) {
	req, err := NewRenewDomainRequest(c.Server, domain, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) TradeDomainWithBody(ctx context.Context, domain string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewTradeDomainRequestWithBody(c.Server, domain, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) TradeDomain(ctx context.Context, domain string, body TradeDomainJSONRequestBody) (*http.Response, error) {
	req, err := NewTradeDomainRequest(c.Server, domain, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) UnlockDomainTransferWithBody(ctx context.Context, domain string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewUnlockDomainTransferRequestWithBody(c.Server, domain, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) UnlockDomainTransfer(ctx context.Context, domain string, body UnlockDomainTransferJSONRequestBody) (*http.Response, error) {
	req, err := NewUnlockDomainTransferRequest(c.Server, domain, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ListSSLCertificates(ctx context.Context, params *ListSSLCertificatesParams) (*http.Response, error) {
	req, err := NewListSSLCertificatesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSSLCertificateWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateSSLCertificateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSSLCertificate(ctx context.Context, body CreateSSLCertificateJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateSSLCertificateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSSLCertificate(ctx context.Context, dnsZone string) (*http.Response, error) {
	req, err := NewDeleteSSLCertificateRequest(c.Server, dnsZone)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ListTasks(ctx context.Context, params *ListTasksParams) (*http.Response, error) {
	req, err := NewListTasksRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// NewListContactsRequest generates requests for ListContacts
func NewListContactsRequest(server string, params *ListContactsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/domain/v2alpha2/contacts")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Domain != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "domain", *params.Domain); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OrganizationId != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "organization_id", *params.OrganizationId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetContactRequest generates requests for GetContact
func NewGetContactRequest(server string, contactId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "contact_id", contactId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/domain/v2alpha2/contacts/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateContactRequest calls the generic UpdateContact builder with application/json body
func NewUpdateContactRequest(server string, contactId string, body UpdateContactJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateContactRequestWithBody(server, contactId, "application/json", bodyReader)
}

// NewUpdateContactRequestWithBody generates requests for UpdateContact with any type of body
func NewUpdateContactRequestWithBody(server string, contactId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "contact_id", contactId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/domain/v2alpha2/contacts/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewListDNSZonesRequest generates requests for ListDNSZones
func NewListDNSZonesRequest(server string, params *ListDNSZonesParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/domain/v2alpha2/dns-zones")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "page", *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "page_size", *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OrderBy != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "order_by", *params.OrderBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Domain != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "domain", *params.Domain); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.DnsZone != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "dns_zone", *params.DnsZone); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OrganizationId != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "organization_id", *params.OrganizationId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateDNSZoneRequest calls the generic CreateDNSZone builder with application/json body
func NewCreateDNSZoneRequest(server string, body CreateDNSZoneJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateDNSZoneRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateDNSZoneRequestWithBody generates requests for CreateDNSZone with any type of body
func NewCreateDNSZoneRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/domain/v2alpha2/dns-zones")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewDeleteDNSZoneRequest generates requests for DeleteDNSZone
func NewDeleteDNSZoneRequest(server string, dnsZone string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "dns_zone", dnsZone)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/domain/v2alpha2/dns-zones/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateDNSZoneRequest calls the generic UpdateDNSZone builder with application/json body
func NewUpdateDNSZoneRequest(server string, dnsZone string, body UpdateDNSZoneJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateDNSZoneRequestWithBody(server, dnsZone, "application/json", bodyReader)
}

// NewUpdateDNSZoneRequestWithBody generates requests for UpdateDNSZone with any type of body
func NewUpdateDNSZoneRequestWithBody(server string, dnsZone string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "dns_zone", dnsZone)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/domain/v2alpha2/dns-zones/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewCopyDNSZoneRequest calls the generic CopyDNSZone builder with application/json body
func NewCopyDNSZoneRequest(server string, dnsZone string, body CopyDNSZoneJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCopyDNSZoneRequestWithBody(server, dnsZone, "application/json", bodyReader)
}

// NewCopyDNSZoneRequestWithBody generates requests for CopyDNSZone with any type of body
func NewCopyDNSZoneRequestWithBody(server string, dnsZone string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "dns_zone", dnsZone)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/domain/v2alpha2/dns-zones/%s/copy", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewImportProviderDNSZoneRequest calls the generic ImportProviderDNSZone builder with application/json body
func NewImportProviderDNSZoneRequest(server string, dnsZone string, body ImportProviderDNSZoneJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewImportProviderDNSZoneRequestWithBody(server, dnsZone, "application/json", bodyReader)
}

// NewImportProviderDNSZoneRequestWithBody generates requests for ImportProviderDNSZone with any type of body
func NewImportProviderDNSZoneRequestWithBody(server string, dnsZone string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "dns_zone", dnsZone)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/domain/v2alpha2/dns-zones/%s/import-provider", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewListDNSZoneNameserversRequest generates requests for ListDNSZoneNameservers
func NewListDNSZoneNameserversRequest(server string, dnsZone string, params *ListDNSZoneNameserversParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "dns_zone", dnsZone)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/domain/v2alpha2/dns-zones/%s/nameservers", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.OrganizationId != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "organization_id", *params.OrganizationId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateDNSZoneNameserversRequest calls the generic UpdateDNSZoneNameservers builder with application/json body
func NewUpdateDNSZoneNameserversRequest(server string, dnsZone string, body UpdateDNSZoneNameserversJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateDNSZoneNameserversRequestWithBody(server, dnsZone, "application/json", bodyReader)
}

// NewUpdateDNSZoneNameserversRequestWithBody generates requests for UpdateDNSZoneNameservers with any type of body
func NewUpdateDNSZoneNameserversRequestWithBody(server string, dnsZone string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "dns_zone", dnsZone)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/domain/v2alpha2/dns-zones/%s/nameservers", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewExportRawDNSZoneRequest generates requests for ExportRawDNSZone
func NewExportRawDNSZoneRequest(server string, dnsZone string, params *ExportRawDNSZoneParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "dns_zone", dnsZone)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/domain/v2alpha2/dns-zones/%s/raw", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Format != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "format", *params.Format); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewImportRawDNSZoneRequest calls the generic ImportRawDNSZone builder with application/json body
func NewImportRawDNSZoneRequest(server string, dnsZone string, body ImportRawDNSZoneJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewImportRawDNSZoneRequestWithBody(server, dnsZone, "application/json", bodyReader)
}

// NewImportRawDNSZoneRequestWithBody generates requests for ImportRawDNSZone with any type of body
func NewImportRawDNSZoneRequestWithBody(server string, dnsZone string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "dns_zone", dnsZone)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/domain/v2alpha2/dns-zones/%s/raw", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewClearDNSZoneRecordsRequest generates requests for ClearDNSZoneRecords
func NewClearDNSZoneRecordsRequest(server string, dnsZone string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "dns_zone", dnsZone)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/domain/v2alpha2/dns-zones/%s/records", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListDNSZoneRecordsRequest generates requests for ListDNSZoneRecords
func NewListDNSZoneRecordsRequest(server string, dnsZone string, params *ListDNSZoneRecordsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "dns_zone", dnsZone)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/domain/v2alpha2/dns-zones/%s/records", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "page", *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "page_size", *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OrderBy != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "order_by", *params.OrderBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Name != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "name", *params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Type != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "type", *params.Type); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OrganizationId != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "organization_id", *params.OrganizationId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateDNSZoneRecordsRequest calls the generic UpdateDNSZoneRecords builder with application/json body
func NewUpdateDNSZoneRecordsRequest(server string, dnsZone string, body UpdateDNSZoneRecordsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateDNSZoneRecordsRequestWithBody(server, dnsZone, "application/json", bodyReader)
}

// NewUpdateDNSZoneRecordsRequestWithBody generates requests for UpdateDNSZoneRecords with any type of body
func NewUpdateDNSZoneRecordsRequestWithBody(server string, dnsZone string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "dns_zone", dnsZone)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/domain/v2alpha2/dns-zones/%s/records", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewRefreshDNSZoneRequest calls the generic RefreshDNSZone builder with application/json body
func NewRefreshDNSZoneRequest(server string, dnsZone string, body RefreshDNSZoneJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRefreshDNSZoneRequestWithBody(server, dnsZone, "application/json", bodyReader)
}

// NewRefreshDNSZoneRequestWithBody generates requests for RefreshDNSZone with any type of body
func NewRefreshDNSZoneRequestWithBody(server string, dnsZone string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "dns_zone", dnsZone)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/domain/v2alpha2/dns-zones/%s/refresh", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetDNSZoneTsigKeyRequest generates requests for GetDNSZoneTsigKey
func NewGetDNSZoneTsigKeyRequest(server string, dnsZone string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "dns_zone", dnsZone)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/domain/v2alpha2/dns-zones/%s/tsig-key", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteDNSZoneTsigKeyRequest generates requests for DeleteDNSZoneTsigKey
func NewDeleteDNSZoneTsigKeyRequest(server string, dnsZone string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "dns_zone", dnsZone)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/domain/v2alpha2/dns-zones/%s/tsig-key/%s", pathParam0, pathParam1)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListDNSZoneVersionsRequest generates requests for ListDNSZoneVersions
func NewListDNSZoneVersionsRequest(server string, dnsZone string, params *ListDNSZoneVersionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "dns_zone", dnsZone)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/domain/v2alpha2/dns-zones/%s/versions", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.OrganizationId != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "organization_id", *params.OrganizationId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDNSZoneVersionDiffRequest generates requests for GetDNSZoneVersionDiff
func NewGetDNSZoneVersionDiffRequest(server string, dnsZone string, version string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "dns_zone", dnsZone)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParam("simple", false, "version", version)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/domain/v2alpha2/dns-zones/%s/versions/%s/diff", pathParam0, pathParam1)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListDNSZoneVersionRecordsRequest generates requests for ListDNSZoneVersionRecords
func NewListDNSZoneVersionRecordsRequest(server string, dnsZone string, version string, params *ListDNSZoneVersionRecordsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "dns_zone", dnsZone)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParam("simple", false, "version", version)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/domain/v2alpha2/dns-zones/%s/versions/%s/records", pathParam0, pathParam1)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.OrganizationId != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "organization_id", *params.OrganizationId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRestoreDNSZoneVersionRequest calls the generic RestoreDNSZoneVersion builder with application/json body
func NewRestoreDNSZoneVersionRequest(server string, dnsZone string, version string, body RestoreDNSZoneVersionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRestoreDNSZoneVersionRequestWithBody(server, dnsZone, version, "application/json", bodyReader)
}

// NewRestoreDNSZoneVersionRequestWithBody generates requests for RestoreDNSZoneVersion with any type of body
func NewRestoreDNSZoneVersionRequestWithBody(server string, dnsZone string, version string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "dns_zone", dnsZone)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParam("simple", false, "version", version)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/domain/v2alpha2/dns-zones/%s/versions/%s/restore", pathParam0, pathParam1)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewListDomainsRequest generates requests for ListDomains
func NewListDomainsRequest(server string, params *ListDomainsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/domain/v2alpha2/domains")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "page", *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "page_size", *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OrderBy != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "order_by", *params.OrderBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Registrar != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "registrar", *params.Registrar); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Status != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "status", *params.Status); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OrganizationId != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "organization_id", *params.OrganizationId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IsExternal != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "is_external", *params.IsExternal); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBuyDomainRequest calls the generic BuyDomain builder with application/json body
func NewBuyDomainRequest(server string, body BuyDomainJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBuyDomainRequestWithBody(server, "application/json", bodyReader)
}

// NewBuyDomainRequestWithBody generates requests for BuyDomain with any type of body
func NewBuyDomainRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/domain/v2alpha2/domains")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewRegisterExternalDomainRequest calls the generic RegisterExternalDomain builder with application/json body
func NewRegisterExternalDomainRequest(server string, body RegisterExternalDomainJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRegisterExternalDomainRequestWithBody(server, "application/json", bodyReader)
}

// NewRegisterExternalDomainRequestWithBody generates requests for RegisterExternalDomain with any type of body
func NewRegisterExternalDomainRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/domain/v2alpha2/domains/external-domain")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewDeleteExternalDomainRequest generates requests for DeleteExternalDomain
func NewDeleteExternalDomainRequest(server string, domain string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "domain", domain)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/domain/v2alpha2/domains/external-domain/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTransferDomainRequest calls the generic TransferDomain builder with application/json body
func NewTransferDomainRequest(server string, body TransferDomainJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTransferDomainRequestWithBody(server, "application/json", bodyReader)
}

// NewTransferDomainRequestWithBody generates requests for TransferDomain with any type of body
func NewTransferDomainRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/domain/v2alpha2/domains/transfer")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetDomainRequest generates requests for GetDomain
func NewGetDomainRequest(server string, domain string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "domain", domain)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/domain/v2alpha2/domains/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateDomainRequest calls the generic UpdateDomain builder with application/json body
func NewUpdateDomainRequest(server string, domain string, body UpdateDomainJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateDomainRequestWithBody(server, domain, "application/json", bodyReader)
}

// NewUpdateDomainRequestWithBody generates requests for UpdateDomain with any type of body
func NewUpdateDomainRequestWithBody(server string, domain string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "domain", domain)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/domain/v2alpha2/domains/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetDomainAuthCodeRequest generates requests for GetDomainAuthCode
func NewGetDomainAuthCodeRequest(server string, domain string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "domain", domain)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/domain/v2alpha2/domains/%s/auth-code", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDisableDomainAutoRenewRequest calls the generic DisableDomainAutoRenew builder with application/json body
func NewDisableDomainAutoRenewRequest(server string, domain string, body DisableDomainAutoRenewJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDisableDomainAutoRenewRequestWithBody(server, domain, "application/json", bodyReader)
}

// NewDisableDomainAutoRenewRequestWithBody generates requests for DisableDomainAutoRenew with any type of body
func NewDisableDomainAutoRenewRequestWithBody(server string, domain string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "domain", domain)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/domain/v2alpha2/domains/%s/disable-auto-renew", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewDisableDomainDNSSECRequest calls the generic DisableDomainDNSSEC builder with application/json body
func NewDisableDomainDNSSECRequest(server string, domain string, body DisableDomainDNSSECJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDisableDomainDNSSECRequestWithBody(server, domain, "application/json", bodyReader)
}

// NewDisableDomainDNSSECRequestWithBody generates requests for DisableDomainDNSSEC with any type of body
func NewDisableDomainDNSSECRequestWithBody(server string, domain string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "domain", domain)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/domain/v2alpha2/domains/%s/disable-dnssec", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewEnableDomainAutoRenewRequest calls the generic EnableDomainAutoRenew builder with application/json body
func NewEnableDomainAutoRenewRequest(server string, domain string, body EnableDomainAutoRenewJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEnableDomainAutoRenewRequestWithBody(server, domain, "application/json", bodyReader)
}

// NewEnableDomainAutoRenewRequestWithBody generates requests for EnableDomainAutoRenew with any type of body
func NewEnableDomainAutoRenewRequestWithBody(server string, domain string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "domain", domain)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/domain/v2alpha2/domains/%s/enable-auto-renew", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewEnableDomainDNSSECRequest calls the generic EnableDomainDNSSEC builder with application/json body
func NewEnableDomainDNSSECRequest(server string, domain string, body EnableDomainDNSSECJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEnableDomainDNSSECRequestWithBody(server, domain, "application/json", bodyReader)
}

// NewEnableDomainDNSSECRequestWithBody generates requests for EnableDomainDNSSEC with any type of body
func NewEnableDomainDNSSECRequestWithBody(server string, domain string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "domain", domain)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/domain/v2alpha2/domains/%s/enable-dnssec", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewLockDomainTransferRequest calls the generic LockDomainTransfer builder with application/json body
func NewLockDomainTransferRequest(server string, domain string, body LockDomainTransferJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewLockDomainTransferRequestWithBody(server, domain, "application/json", bodyReader)
}

// NewLockDomainTransferRequestWithBody generates requests for LockDomainTransfer with any type of body
func NewLockDomainTransferRequestWithBody(server string, domain string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "domain", domain)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/domain/v2alpha2/domains/%s/lock-transfer", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewRenewDomainRequest calls the generic RenewDomain builder with application/json body
func NewRenewDomainRequest(server string, domain string, body RenewDomainJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRenewDomainRequestWithBody(server, domain, "application/json", bodyReader)
}

// NewRenewDomainRequestWithBody generates requests for RenewDomain with any type of body
func NewRenewDomainRequestWithBody(server string, domain string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "domain", domain)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/domain/v2alpha2/domains/%s/renew", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewTradeDomainRequest calls the generic TradeDomain builder with application/json body
func NewTradeDomainRequest(server string, domain string, body TradeDomainJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTradeDomainRequestWithBody(server, domain, "application/json", bodyReader)
}

// NewTradeDomainRequestWithBody generates requests for TradeDomain with any type of body
func NewTradeDomainRequestWithBody(server string, domain string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "domain", domain)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/domain/v2alpha2/domains/%s/trade", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewUnlockDomainTransferRequest calls the generic UnlockDomainTransfer builder with application/json body
func NewUnlockDomainTransferRequest(server string, domain string, body UnlockDomainTransferJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUnlockDomainTransferRequestWithBody(server, domain, "application/json", bodyReader)
}

// NewUnlockDomainTransferRequestWithBody generates requests for UnlockDomainTransfer with any type of body
func NewUnlockDomainTransferRequestWithBody(server string, domain string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "domain", domain)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/domain/v2alpha2/domains/%s/unlock-transfer", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewListSSLCertificatesRequest generates requests for ListSSLCertificates
func NewListSSLCertificatesRequest(server string, params *ListSSLCertificatesParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/domain/v2alpha2/ssl-certificates")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "page", *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "page_size", *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.DnsZone != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "dns_zone", *params.DnsZone); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OrganizationId != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "organization_id", *params.OrganizationId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateSSLCertificateRequest calls the generic CreateSSLCertificate builder with application/json body
func NewCreateSSLCertificateRequest(server string, body CreateSSLCertificateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateSSLCertificateRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateSSLCertificateRequestWithBody generates requests for CreateSSLCertificate with any type of body
func NewCreateSSLCertificateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/domain/v2alpha2/ssl-certificates")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewDeleteSSLCertificateRequest generates requests for DeleteSSLCertificate
func NewDeleteSSLCertificateRequest(server string, dnsZone string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "dns_zone", dnsZone)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/domain/v2alpha2/ssl-certificates/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListTasksRequest generates requests for ListTasks
func NewListTasksRequest(server string, params *ListTasksParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/domain/v2alpha2/tasks")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "page", *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "page_size", *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Domain != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "domain", *params.Domain); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OrganizationId != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "organization_id", *params.OrganizationId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// ListContacts request
	ListContactsWithResponse(ctx context.Context, params *ListContactsParams) (*ListContactsResponse, error)

	// GetContact request
	GetContactWithResponse(ctx context.Context, contactId string) (*GetContactResponse, error)

	// UpdateContact request  with any body
	UpdateContactWithBodyWithResponse(ctx context.Context, contactId string, contentType string, body io.Reader) (*UpdateContactResponse, error)

	UpdateContactWithResponse(ctx context.Context, contactId string, body UpdateContactJSONRequestBody) (*UpdateContactResponse, error)

	// ListDNSZones request
	ListDNSZonesWithResponse(ctx context.Context, params *ListDNSZonesParams) (*ListDNSZonesResponse, error)

	// CreateDNSZone request  with any body
	CreateDNSZoneWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateDNSZoneResponse, error)

	CreateDNSZoneWithResponse(ctx context.Context, body CreateDNSZoneJSONRequestBody) (*CreateDNSZoneResponse, error)

	// DeleteDNSZone request
	DeleteDNSZoneWithResponse(ctx context.Context, dnsZone string) (*DeleteDNSZoneResponse, error)

	// UpdateDNSZone request  with any body
	UpdateDNSZoneWithBodyWithResponse(ctx context.Context, dnsZone string, contentType string, body io.Reader) (*UpdateDNSZoneResponse, error)

	UpdateDNSZoneWithResponse(ctx context.Context, dnsZone string, body UpdateDNSZoneJSONRequestBody) (*UpdateDNSZoneResponse, error)

	// CopyDNSZone request  with any body
	CopyDNSZoneWithBodyWithResponse(ctx context.Context, dnsZone string, contentType string, body io.Reader) (*CopyDNSZoneResponse, error)

	CopyDNSZoneWithResponse(ctx context.Context, dnsZone string, body CopyDNSZoneJSONRequestBody) (*CopyDNSZoneResponse, error)

	// ImportProviderDNSZone request  with any body
	ImportProviderDNSZoneWithBodyWithResponse(ctx context.Context, dnsZone string, contentType string, body io.Reader) (*ImportProviderDNSZoneResponse, error)

	ImportProviderDNSZoneWithResponse(ctx context.Context, dnsZone string, body ImportProviderDNSZoneJSONRequestBody) (*ImportProviderDNSZoneResponse, error)

	// ListDNSZoneNameservers request
	ListDNSZoneNameserversWithResponse(ctx context.Context, dnsZone string, params *ListDNSZoneNameserversParams) (*ListDNSZoneNameserversResponse, error)

	// UpdateDNSZoneNameservers request  with any body
	UpdateDNSZoneNameserversWithBodyWithResponse(ctx context.Context, dnsZone string, contentType string, body io.Reader) (*UpdateDNSZoneNameserversResponse, error)

	UpdateDNSZoneNameserversWithResponse(ctx context.Context, dnsZone string, body UpdateDNSZoneNameserversJSONRequestBody) (*UpdateDNSZoneNameserversResponse, error)

	// ExportRawDNSZone request
	ExportRawDNSZoneWithResponse(ctx context.Context, dnsZone string, params *ExportRawDNSZoneParams) (*ExportRawDNSZoneResponse, error)

	// ImportRawDNSZone request  with any body
	ImportRawDNSZoneWithBodyWithResponse(ctx context.Context, dnsZone string, contentType string, body io.Reader) (*ImportRawDNSZoneResponse, error)

	ImportRawDNSZoneWithResponse(ctx context.Context, dnsZone string, body ImportRawDNSZoneJSONRequestBody) (*ImportRawDNSZoneResponse, error)

	// ClearDNSZoneRecords request
	ClearDNSZoneRecordsWithResponse(ctx context.Context, dnsZone string) (*ClearDNSZoneRecordsResponse, error)

	// ListDNSZoneRecords request
	ListDNSZoneRecordsWithResponse(ctx context.Context, dnsZone string, params *ListDNSZoneRecordsParams) (*ListDNSZoneRecordsResponse, error)

	// UpdateDNSZoneRecords request  with any body
	UpdateDNSZoneRecordsWithBodyWithResponse(ctx context.Context, dnsZone string, contentType string, body io.Reader) (*UpdateDNSZoneRecordsResponse, error)

	UpdateDNSZoneRecordsWithResponse(ctx context.Context, dnsZone string, body UpdateDNSZoneRecordsJSONRequestBody) (*UpdateDNSZoneRecordsResponse, error)

	// RefreshDNSZone request  with any body
	RefreshDNSZoneWithBodyWithResponse(ctx context.Context, dnsZone string, contentType string, body io.Reader) (*RefreshDNSZoneResponse, error)

	RefreshDNSZoneWithResponse(ctx context.Context, dnsZone string, body RefreshDNSZoneJSONRequestBody) (*RefreshDNSZoneResponse, error)

	// GetDNSZoneTsigKey request
	GetDNSZoneTsigKeyWithResponse(ctx context.Context, dnsZone string) (*GetDNSZoneTsigKeyResponse, error)

	// DeleteDNSZoneTsigKey request
	DeleteDNSZoneTsigKeyWithResponse(ctx context.Context, dnsZone string, id string) (*DeleteDNSZoneTsigKeyResponse, error)

	// ListDNSZoneVersions request
	ListDNSZoneVersionsWithResponse(ctx context.Context, dnsZone string, params *ListDNSZoneVersionsParams) (*ListDNSZoneVersionsResponse, error)

	// GetDNSZoneVersionDiff request
	GetDNSZoneVersionDiffWithResponse(ctx context.Context, dnsZone string, version string) (*GetDNSZoneVersionDiffResponse, error)

	// ListDNSZoneVersionRecords request
	ListDNSZoneVersionRecordsWithResponse(ctx context.Context, dnsZone string, version string, params *ListDNSZoneVersionRecordsParams) (*ListDNSZoneVersionRecordsResponse, error)

	// RestoreDNSZoneVersion request  with any body
	RestoreDNSZoneVersionWithBodyWithResponse(ctx context.Context, dnsZone string, version string, contentType string, body io.Reader) (*RestoreDNSZoneVersionResponse, error)

	RestoreDNSZoneVersionWithResponse(ctx context.Context, dnsZone string, version string, body RestoreDNSZoneVersionJSONRequestBody) (*RestoreDNSZoneVersionResponse, error)

	// ListDomains request
	ListDomainsWithResponse(ctx context.Context, params *ListDomainsParams) (*ListDomainsResponse, error)

	// BuyDomain request  with any body
	BuyDomainWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*BuyDomainResponse, error)

	BuyDomainWithResponse(ctx context.Context, body BuyDomainJSONRequestBody) (*BuyDomainResponse, error)

	// RegisterExternalDomain request  with any body
	RegisterExternalDomainWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*RegisterExternalDomainResponse, error)

	RegisterExternalDomainWithResponse(ctx context.Context, body RegisterExternalDomainJSONRequestBody) (*RegisterExternalDomainResponse, error)

	// DeleteExternalDomain request
	DeleteExternalDomainWithResponse(ctx context.Context, domain string) (*DeleteExternalDomainResponse, error)

	// TransferDomain request  with any body
	TransferDomainWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*TransferDomainResponse, error)

	TransferDomainWithResponse(ctx context.Context, body TransferDomainJSONRequestBody) (*TransferDomainResponse, error)

	// GetDomain request
	GetDomainWithResponse(ctx context.Context, domain string) (*GetDomainResponse, error)

	// UpdateDomain request  with any body
	UpdateDomainWithBodyWithResponse(ctx context.Context, domain string, contentType string, body io.Reader) (*UpdateDomainResponse, error)

	UpdateDomainWithResponse(ctx context.Context, domain string, body UpdateDomainJSONRequestBody) (*UpdateDomainResponse, error)

	// GetDomainAuthCode request
	GetDomainAuthCodeWithResponse(ctx context.Context, domain string) (*GetDomainAuthCodeResponse, error)

	// DisableDomainAutoRenew request  with any body
	DisableDomainAutoRenewWithBodyWithResponse(ctx context.Context, domain string, contentType string, body io.Reader) (*DisableDomainAutoRenewResponse, error)

	DisableDomainAutoRenewWithResponse(ctx context.Context, domain string, body DisableDomainAutoRenewJSONRequestBody) (*DisableDomainAutoRenewResponse, error)

	// DisableDomainDNSSEC request  with any body
	DisableDomainDNSSECWithBodyWithResponse(ctx context.Context, domain string, contentType string, body io.Reader) (*DisableDomainDNSSECResponse, error)

	DisableDomainDNSSECWithResponse(ctx context.Context, domain string, body DisableDomainDNSSECJSONRequestBody) (*DisableDomainDNSSECResponse, error)

	// EnableDomainAutoRenew request  with any body
	EnableDomainAutoRenewWithBodyWithResponse(ctx context.Context, domain string, contentType string, body io.Reader) (*EnableDomainAutoRenewResponse, error)

	EnableDomainAutoRenewWithResponse(ctx context.Context, domain string, body EnableDomainAutoRenewJSONRequestBody) (*EnableDomainAutoRenewResponse, error)

	// EnableDomainDNSSEC request  with any body
	EnableDomainDNSSECWithBodyWithResponse(ctx context.Context, domain string, contentType string, body io.Reader) (*EnableDomainDNSSECResponse, error)

	EnableDomainDNSSECWithResponse(ctx context.Context, domain string, body EnableDomainDNSSECJSONRequestBody) (*EnableDomainDNSSECResponse, error)

	// LockDomainTransfer request  with any body
	LockDomainTransferWithBodyWithResponse(ctx context.Context, domain string, contentType string, body io.Reader) (*LockDomainTransferResponse, error)

	LockDomainTransferWithResponse(ctx context.Context, domain string, body LockDomainTransferJSONRequestBody) (*LockDomainTransferResponse, error)

	// RenewDomain request  with any body
	RenewDomainWithBodyWithResponse(ctx context.Context, domain string, contentType string, body io.Reader) (*RenewDomainResponse, error)

	RenewDomainWithResponse(ctx context.Context, domain string, body RenewDomainJSONRequestBody) (*RenewDomainResponse, error)

	// TradeDomain request  with any body
	TradeDomainWithBodyWithResponse(ctx context.Context, domain string, contentType string, body io.Reader) (*TradeDomainResponse, error)

	TradeDomainWithResponse(ctx context.Context, domain string, body TradeDomainJSONRequestBody) (*TradeDomainResponse, error)

	// UnlockDomainTransfer request  with any body
	UnlockDomainTransferWithBodyWithResponse(ctx context.Context, domain string, contentType string, body io.Reader) (*UnlockDomainTransferResponse, error)

	UnlockDomainTransferWithResponse(ctx context.Context, domain string, body UnlockDomainTransferJSONRequestBody) (*UnlockDomainTransferResponse, error)

	// ListSSLCertificates request
	ListSSLCertificatesWithResponse(ctx context.Context, params *ListSSLCertificatesParams) (*ListSSLCertificatesResponse, error)

	// CreateSSLCertificate request  with any body
	CreateSSLCertificateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateSSLCertificateResponse, error)

	CreateSSLCertificateWithResponse(ctx context.Context, body CreateSSLCertificateJSONRequestBody) (*CreateSSLCertificateResponse, error)

	// DeleteSSLCertificate request
	DeleteSSLCertificateWithResponse(ctx context.Context, dnsZone string) (*DeleteSSLCertificateResponse, error)

	// ListTasks request
	ListTasksWithResponse(ctx context.Context, params *ListTasksParams) (*ListTasksResponse, error)
}

type ListContactsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScalewayDomainV2alpha2ListContactsResponse
}

// Status returns HTTPResponse.Status
func (r ListContactsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListContactsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetContactResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScalewayDomainV2alpha2Contact
}

// Status returns HTTPResponse.Status
func (r GetContactResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetContactResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateContactResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScalewayDomainV2alpha2Contact
}

// Status returns HTTPResponse.Status
func (r UpdateContactResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateContactResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListDNSZonesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScalewayDomainV2alpha2ListDNSZonesResponse
}

// Status returns HTTPResponse.Status
func (r ListDNSZonesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListDNSZonesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateDNSZoneResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScalewayDomainV2alpha2DNSZone
}

// Status returns HTTPResponse.Status
func (r CreateDNSZoneResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateDNSZoneResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteDNSZoneResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScalewayDomainV2alpha2DeleteDNSZoneResponse
}

// Status returns HTTPResponse.Status
func (r DeleteDNSZoneResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteDNSZoneResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateDNSZoneResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScalewayDomainV2alpha2DNSZone
}

// Status returns HTTPResponse.Status
func (r UpdateDNSZoneResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateDNSZoneResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CopyDNSZoneResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScalewayDomainV2alpha2DNSZone
}

// Status returns HTTPResponse.Status
func (r CopyDNSZoneResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CopyDNSZoneResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ImportProviderDNSZoneResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScalewayDomainV2alpha2ImportProviderDNSZoneResponse
}

// Status returns HTTPResponse.Status
func (r ImportProviderDNSZoneResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ImportProviderDNSZoneResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListDNSZoneNameserversResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScalewayDomainV2alpha2ListDNSZoneNameserversResponse
}

// Status returns HTTPResponse.Status
func (r ListDNSZoneNameserversResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListDNSZoneNameserversResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateDNSZoneNameserversResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScalewayDomainV2alpha2UpdateDNSZoneNameserversResponse
}

// Status returns HTTPResponse.Status
func (r UpdateDNSZoneNameserversResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateDNSZoneNameserversResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ExportRawDNSZoneResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScalewayStdFile
}

// Status returns HTTPResponse.Status
func (r ExportRawDNSZoneResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExportRawDNSZoneResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ImportRawDNSZoneResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScalewayDomainV2alpha2ImportRawDNSZoneResponse
}

// Status returns HTTPResponse.Status
func (r ImportRawDNSZoneResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ImportRawDNSZoneResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ClearDNSZoneRecordsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScalewayDomainV2alpha2ClearDNSZoneRecordsResponse
}

// Status returns HTTPResponse.Status
func (r ClearDNSZoneRecordsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ClearDNSZoneRecordsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListDNSZoneRecordsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScalewayDomainV2alpha2ListDNSZoneRecordsResponse
}

// Status returns HTTPResponse.Status
func (r ListDNSZoneRecordsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListDNSZoneRecordsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateDNSZoneRecordsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScalewayDomainV2alpha2UpdateDNSZoneRecordsResponse
}

// Status returns HTTPResponse.Status
func (r UpdateDNSZoneRecordsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateDNSZoneRecordsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RefreshDNSZoneResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScalewayDomainV2alpha2RefreshDNSZoneResponse
}

// Status returns HTTPResponse.Status
func (r RefreshDNSZoneResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RefreshDNSZoneResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDNSZoneTsigKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScalewayDomainV2alpha2GetDNSZoneTsigKeyResponse
}

// Status returns HTTPResponse.Status
func (r GetDNSZoneTsigKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDNSZoneTsigKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteDNSZoneTsigKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteDNSZoneTsigKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteDNSZoneTsigKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListDNSZoneVersionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScalewayDomainV2alpha2ListDNSZoneVersionsResponse
}

// Status returns HTTPResponse.Status
func (r ListDNSZoneVersionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListDNSZoneVersionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDNSZoneVersionDiffResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScalewayDomainV2alpha2GetDNSZoneVersionDiffResponse
}

// Status returns HTTPResponse.Status
func (r GetDNSZoneVersionDiffResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDNSZoneVersionDiffResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListDNSZoneVersionRecordsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScalewayDomainV2alpha2ListDNSZoneVersionRecordsResponse
}

// Status returns HTTPResponse.Status
func (r ListDNSZoneVersionRecordsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListDNSZoneVersionRecordsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RestoreDNSZoneVersionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScalewayDomainV2alpha2RestoreDNSZoneVersionResponse
}

// Status returns HTTPResponse.Status
func (r RestoreDNSZoneVersionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RestoreDNSZoneVersionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListDomainsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScalewayDomainV2alpha2ListDomainsResponse
}

// Status returns HTTPResponse.Status
func (r ListDomainsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListDomainsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BuyDomainResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScalewayDomainV2alpha2Domain
}

// Status returns HTTPResponse.Status
func (r BuyDomainResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BuyDomainResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RegisterExternalDomainResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScalewayDomainV2alpha2RegisterExternalDomainResponse
}

// Status returns HTTPResponse.Status
func (r RegisterExternalDomainResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RegisterExternalDomainResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteExternalDomainResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScalewayDomainV2alpha2DeleteExternalDomainResponse
}

// Status returns HTTPResponse.Status
func (r DeleteExternalDomainResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteExternalDomainResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TransferDomainResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScalewayDomainV2alpha2Domain
}

// Status returns HTTPResponse.Status
func (r TransferDomainResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TransferDomainResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDomainResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScalewayDomainV2alpha2GetDomainResponse
}

// Status returns HTTPResponse.Status
func (r GetDomainResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDomainResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateDomainResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScalewayDomainV2alpha2Domain
}

// Status returns HTTPResponse.Status
func (r UpdateDomainResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateDomainResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDomainAuthCodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScalewayDomainV2alpha2GetDomainAuthCodeResponse
}

// Status returns HTTPResponse.Status
func (r GetDomainAuthCodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDomainAuthCodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DisableDomainAutoRenewResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScalewayDomainV2alpha2Domain
}

// Status returns HTTPResponse.Status
func (r DisableDomainAutoRenewResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DisableDomainAutoRenewResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DisableDomainDNSSECResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScalewayDomainV2alpha2Domain
}

// Status returns HTTPResponse.Status
func (r DisableDomainDNSSECResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DisableDomainDNSSECResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EnableDomainAutoRenewResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScalewayDomainV2alpha2Domain
}

// Status returns HTTPResponse.Status
func (r EnableDomainAutoRenewResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EnableDomainAutoRenewResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EnableDomainDNSSECResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScalewayDomainV2alpha2Domain
}

// Status returns HTTPResponse.Status
func (r EnableDomainDNSSECResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EnableDomainDNSSECResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LockDomainTransferResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScalewayDomainV2alpha2Domain
}

// Status returns HTTPResponse.Status
func (r LockDomainTransferResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LockDomainTransferResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RenewDomainResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScalewayDomainV2alpha2Domain
}

// Status returns HTTPResponse.Status
func (r RenewDomainResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RenewDomainResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TradeDomainResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScalewayDomainV2alpha2Domain
}

// Status returns HTTPResponse.Status
func (r TradeDomainResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TradeDomainResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UnlockDomainTransferResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScalewayDomainV2alpha2Domain
}

// Status returns HTTPResponse.Status
func (r UnlockDomainTransferResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UnlockDomainTransferResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListSSLCertificatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScalewayDomainV2alpha2ListSSLCertificatesResponse
}

// Status returns HTTPResponse.Status
func (r ListSSLCertificatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListSSLCertificatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateSSLCertificateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScalewayDomainV2alpha2ZoneSSL
}

// Status returns HTTPResponse.Status
func (r CreateSSLCertificateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSSLCertificateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSSLCertificateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScalewayDomainV2alpha2DeleteSSLCertificateResponse
}

// Status returns HTTPResponse.Status
func (r DeleteSSLCertificateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSSLCertificateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListTasksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScalewayDomainV2alpha2ListTasksResponse
}

// Status returns HTTPResponse.Status
func (r ListTasksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListTasksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ListContactsWithResponse request returning *ListContactsResponse
func (c *ClientWithResponses) ListContactsWithResponse(ctx context.Context, params *ListContactsParams) (*ListContactsResponse, error) {
	rsp, err := c.ListContacts(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseListContactsResponse(rsp)
}

// GetContactWithResponse request returning *GetContactResponse
func (c *ClientWithResponses) GetContactWithResponse(ctx context.Context, contactId string) (*GetContactResponse, error) {
	rsp, err := c.GetContact(ctx, contactId)
	if err != nil {
		return nil, err
	}
	return ParseGetContactResponse(rsp)
}

// UpdateContactWithBodyWithResponse request with arbitrary body returning *UpdateContactResponse
func (c *ClientWithResponses) UpdateContactWithBodyWithResponse(ctx context.Context, contactId string, contentType string, body io.Reader) (*UpdateContactResponse, error) {
	rsp, err := c.UpdateContactWithBody(ctx, contactId, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateContactResponse(rsp)
}

func (c *ClientWithResponses) UpdateContactWithResponse(ctx context.Context, contactId string, body UpdateContactJSONRequestBody) (*UpdateContactResponse, error) {
	rsp, err := c.UpdateContact(ctx, contactId, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateContactResponse(rsp)
}

// ListDNSZonesWithResponse request returning *ListDNSZonesResponse
func (c *ClientWithResponses) ListDNSZonesWithResponse(ctx context.Context, params *ListDNSZonesParams) (*ListDNSZonesResponse, error) {
	rsp, err := c.ListDNSZones(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseListDNSZonesResponse(rsp)
}

// CreateDNSZoneWithBodyWithResponse request with arbitrary body returning *CreateDNSZoneResponse
func (c *ClientWithResponses) CreateDNSZoneWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateDNSZoneResponse, error) {
	rsp, err := c.CreateDNSZoneWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateDNSZoneResponse(rsp)
}

func (c *ClientWithResponses) CreateDNSZoneWithResponse(ctx context.Context, body CreateDNSZoneJSONRequestBody) (*CreateDNSZoneResponse, error) {
	rsp, err := c.CreateDNSZone(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateDNSZoneResponse(rsp)
}

// DeleteDNSZoneWithResponse request returning *DeleteDNSZoneResponse
func (c *ClientWithResponses) DeleteDNSZoneWithResponse(ctx context.Context, dnsZone string) (*DeleteDNSZoneResponse, error) {
	rsp, err := c.DeleteDNSZone(ctx, dnsZone)
	if err != nil {
		return nil, err
	}
	return ParseDeleteDNSZoneResponse(rsp)
}

// UpdateDNSZoneWithBodyWithResponse request with arbitrary body returning *UpdateDNSZoneResponse
func (c *ClientWithResponses) UpdateDNSZoneWithBodyWithResponse(ctx context.Context, dnsZone string, contentType string, body io.Reader) (*UpdateDNSZoneResponse, error) {
	rsp, err := c.UpdateDNSZoneWithBody(ctx, dnsZone, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateDNSZoneResponse(rsp)
}

func (c *ClientWithResponses) UpdateDNSZoneWithResponse(ctx context.Context, dnsZone string, body UpdateDNSZoneJSONRequestBody) (*UpdateDNSZoneResponse, error) {
	rsp, err := c.UpdateDNSZone(ctx, dnsZone, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateDNSZoneResponse(rsp)
}

// CopyDNSZoneWithBodyWithResponse request with arbitrary body returning *CopyDNSZoneResponse
func (c *ClientWithResponses) CopyDNSZoneWithBodyWithResponse(ctx context.Context, dnsZone string, contentType string, body io.Reader) (*CopyDNSZoneResponse, error) {
	rsp, err := c.CopyDNSZoneWithBody(ctx, dnsZone, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCopyDNSZoneResponse(rsp)
}

func (c *ClientWithResponses) CopyDNSZoneWithResponse(ctx context.Context, dnsZone string, body CopyDNSZoneJSONRequestBody) (*CopyDNSZoneResponse, error) {
	rsp, err := c.CopyDNSZone(ctx, dnsZone, body)
	if err != nil {
		return nil, err
	}
	return ParseCopyDNSZoneResponse(rsp)
}

// ImportProviderDNSZoneWithBodyWithResponse request with arbitrary body returning *ImportProviderDNSZoneResponse
func (c *ClientWithResponses) ImportProviderDNSZoneWithBodyWithResponse(ctx context.Context, dnsZone string, contentType string, body io.Reader) (*ImportProviderDNSZoneResponse, error) {
	rsp, err := c.ImportProviderDNSZoneWithBody(ctx, dnsZone, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseImportProviderDNSZoneResponse(rsp)
}

func (c *ClientWithResponses) ImportProviderDNSZoneWithResponse(ctx context.Context, dnsZone string, body ImportProviderDNSZoneJSONRequestBody) (*ImportProviderDNSZoneResponse, error) {
	rsp, err := c.ImportProviderDNSZone(ctx, dnsZone, body)
	if err != nil {
		return nil, err
	}
	return ParseImportProviderDNSZoneResponse(rsp)
}

// ListDNSZoneNameserversWithResponse request returning *ListDNSZoneNameserversResponse
func (c *ClientWithResponses) ListDNSZoneNameserversWithResponse(ctx context.Context, dnsZone string, params *ListDNSZoneNameserversParams) (*ListDNSZoneNameserversResponse, error) {
	rsp, err := c.ListDNSZoneNameservers(ctx, dnsZone, params)
	if err != nil {
		return nil, err
	}
	return ParseListDNSZoneNameserversResponse(rsp)
}

// UpdateDNSZoneNameserversWithBodyWithResponse request with arbitrary body returning *UpdateDNSZoneNameserversResponse
func (c *ClientWithResponses) UpdateDNSZoneNameserversWithBodyWithResponse(ctx context.Context, dnsZone string, contentType string, body io.Reader) (*UpdateDNSZoneNameserversResponse, error) {
	rsp, err := c.UpdateDNSZoneNameserversWithBody(ctx, dnsZone, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateDNSZoneNameserversResponse(rsp)
}

func (c *ClientWithResponses) UpdateDNSZoneNameserversWithResponse(ctx context.Context, dnsZone string, body UpdateDNSZoneNameserversJSONRequestBody) (*UpdateDNSZoneNameserversResponse, error) {
	rsp, err := c.UpdateDNSZoneNameservers(ctx, dnsZone, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateDNSZoneNameserversResponse(rsp)
}

// ExportRawDNSZoneWithResponse request returning *ExportRawDNSZoneResponse
func (c *ClientWithResponses) ExportRawDNSZoneWithResponse(ctx context.Context, dnsZone string, params *ExportRawDNSZoneParams) (*ExportRawDNSZoneResponse, error) {
	rsp, err := c.ExportRawDNSZone(ctx, dnsZone, params)
	if err != nil {
		return nil, err
	}
	return ParseExportRawDNSZoneResponse(rsp)
}

// ImportRawDNSZoneWithBodyWithResponse request with arbitrary body returning *ImportRawDNSZoneResponse
func (c *ClientWithResponses) ImportRawDNSZoneWithBodyWithResponse(ctx context.Context, dnsZone string, contentType string, body io.Reader) (*ImportRawDNSZoneResponse, error) {
	rsp, err := c.ImportRawDNSZoneWithBody(ctx, dnsZone, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseImportRawDNSZoneResponse(rsp)
}

func (c *ClientWithResponses) ImportRawDNSZoneWithResponse(ctx context.Context, dnsZone string, body ImportRawDNSZoneJSONRequestBody) (*ImportRawDNSZoneResponse, error) {
	rsp, err := c.ImportRawDNSZone(ctx, dnsZone, body)
	if err != nil {
		return nil, err
	}
	return ParseImportRawDNSZoneResponse(rsp)
}

// ClearDNSZoneRecordsWithResponse request returning *ClearDNSZoneRecordsResponse
func (c *ClientWithResponses) ClearDNSZoneRecordsWithResponse(ctx context.Context, dnsZone string) (*ClearDNSZoneRecordsResponse, error) {
	rsp, err := c.ClearDNSZoneRecords(ctx, dnsZone)
	if err != nil {
		return nil, err
	}
	return ParseClearDNSZoneRecordsResponse(rsp)
}

// ListDNSZoneRecordsWithResponse request returning *ListDNSZoneRecordsResponse
func (c *ClientWithResponses) ListDNSZoneRecordsWithResponse(ctx context.Context, dnsZone string, params *ListDNSZoneRecordsParams) (*ListDNSZoneRecordsResponse, error) {
	rsp, err := c.ListDNSZoneRecords(ctx, dnsZone, params)
	if err != nil {
		return nil, err
	}
	return ParseListDNSZoneRecordsResponse(rsp)
}

// UpdateDNSZoneRecordsWithBodyWithResponse request with arbitrary body returning *UpdateDNSZoneRecordsResponse
func (c *ClientWithResponses) UpdateDNSZoneRecordsWithBodyWithResponse(ctx context.Context, dnsZone string, contentType string, body io.Reader) (*UpdateDNSZoneRecordsResponse, error) {
	rsp, err := c.UpdateDNSZoneRecordsWithBody(ctx, dnsZone, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateDNSZoneRecordsResponse(rsp)
}

func (c *ClientWithResponses) UpdateDNSZoneRecordsWithResponse(ctx context.Context, dnsZone string, body UpdateDNSZoneRecordsJSONRequestBody) (*UpdateDNSZoneRecordsResponse, error) {
	rsp, err := c.UpdateDNSZoneRecords(ctx, dnsZone, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateDNSZoneRecordsResponse(rsp)
}

// RefreshDNSZoneWithBodyWithResponse request with arbitrary body returning *RefreshDNSZoneResponse
func (c *ClientWithResponses) RefreshDNSZoneWithBodyWithResponse(ctx context.Context, dnsZone string, contentType string, body io.Reader) (*RefreshDNSZoneResponse, error) {
	rsp, err := c.RefreshDNSZoneWithBody(ctx, dnsZone, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseRefreshDNSZoneResponse(rsp)
}

func (c *ClientWithResponses) RefreshDNSZoneWithResponse(ctx context.Context, dnsZone string, body RefreshDNSZoneJSONRequestBody) (*RefreshDNSZoneResponse, error) {
	rsp, err := c.RefreshDNSZone(ctx, dnsZone, body)
	if err != nil {
		return nil, err
	}
	return ParseRefreshDNSZoneResponse(rsp)
}

// GetDNSZoneTsigKeyWithResponse request returning *GetDNSZoneTsigKeyResponse
func (c *ClientWithResponses) GetDNSZoneTsigKeyWithResponse(ctx context.Context, dnsZone string) (*GetDNSZoneTsigKeyResponse, error) {
	rsp, err := c.GetDNSZoneTsigKey(ctx, dnsZone)
	if err != nil {
		return nil, err
	}
	return ParseGetDNSZoneTsigKeyResponse(rsp)
}

// DeleteDNSZoneTsigKeyWithResponse request returning *DeleteDNSZoneTsigKeyResponse
func (c *ClientWithResponses) DeleteDNSZoneTsigKeyWithResponse(ctx context.Context, dnsZone string, id string) (*DeleteDNSZoneTsigKeyResponse, error) {
	rsp, err := c.DeleteDNSZoneTsigKey(ctx, dnsZone, id)
	if err != nil {
		return nil, err
	}
	return ParseDeleteDNSZoneTsigKeyResponse(rsp)
}

// ListDNSZoneVersionsWithResponse request returning *ListDNSZoneVersionsResponse
func (c *ClientWithResponses) ListDNSZoneVersionsWithResponse(ctx context.Context, dnsZone string, params *ListDNSZoneVersionsParams) (*ListDNSZoneVersionsResponse, error) {
	rsp, err := c.ListDNSZoneVersions(ctx, dnsZone, params)
	if err != nil {
		return nil, err
	}
	return ParseListDNSZoneVersionsResponse(rsp)
}

// GetDNSZoneVersionDiffWithResponse request returning *GetDNSZoneVersionDiffResponse
func (c *ClientWithResponses) GetDNSZoneVersionDiffWithResponse(ctx context.Context, dnsZone string, version string) (*GetDNSZoneVersionDiffResponse, error) {
	rsp, err := c.GetDNSZoneVersionDiff(ctx, dnsZone, version)
	if err != nil {
		return nil, err
	}
	return ParseGetDNSZoneVersionDiffResponse(rsp)
}

// ListDNSZoneVersionRecordsWithResponse request returning *ListDNSZoneVersionRecordsResponse
func (c *ClientWithResponses) ListDNSZoneVersionRecordsWithResponse(ctx context.Context, dnsZone string, version string, params *ListDNSZoneVersionRecordsParams) (*ListDNSZoneVersionRecordsResponse, error) {
	rsp, err := c.ListDNSZoneVersionRecords(ctx, dnsZone, version, params)
	if err != nil {
		return nil, err
	}
	return ParseListDNSZoneVersionRecordsResponse(rsp)
}

// RestoreDNSZoneVersionWithBodyWithResponse request with arbitrary body returning *RestoreDNSZoneVersionResponse
func (c *ClientWithResponses) RestoreDNSZoneVersionWithBodyWithResponse(ctx context.Context, dnsZone string, version string, contentType string, body io.Reader) (*RestoreDNSZoneVersionResponse, error) {
	rsp, err := c.RestoreDNSZoneVersionWithBody(ctx, dnsZone, version, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseRestoreDNSZoneVersionResponse(rsp)
}

func (c *ClientWithResponses) RestoreDNSZoneVersionWithResponse(ctx context.Context, dnsZone string, version string, body RestoreDNSZoneVersionJSONRequestBody) (*RestoreDNSZoneVersionResponse, error) {
	rsp, err := c.RestoreDNSZoneVersion(ctx, dnsZone, version, body)
	if err != nil {
		return nil, err
	}
	return ParseRestoreDNSZoneVersionResponse(rsp)
}

// ListDomainsWithResponse request returning *ListDomainsResponse
func (c *ClientWithResponses) ListDomainsWithResponse(ctx context.Context, params *ListDomainsParams) (*ListDomainsResponse, error) {
	rsp, err := c.ListDomains(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseListDomainsResponse(rsp)
}

// BuyDomainWithBodyWithResponse request with arbitrary body returning *BuyDomainResponse
func (c *ClientWithResponses) BuyDomainWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*BuyDomainResponse, error) {
	rsp, err := c.BuyDomainWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseBuyDomainResponse(rsp)
}

func (c *ClientWithResponses) BuyDomainWithResponse(ctx context.Context, body BuyDomainJSONRequestBody) (*BuyDomainResponse, error) {
	rsp, err := c.BuyDomain(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseBuyDomainResponse(rsp)
}

// RegisterExternalDomainWithBodyWithResponse request with arbitrary body returning *RegisterExternalDomainResponse
func (c *ClientWithResponses) RegisterExternalDomainWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*RegisterExternalDomainResponse, error) {
	rsp, err := c.RegisterExternalDomainWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseRegisterExternalDomainResponse(rsp)
}

func (c *ClientWithResponses) RegisterExternalDomainWithResponse(ctx context.Context, body RegisterExternalDomainJSONRequestBody) (*RegisterExternalDomainResponse, error) {
	rsp, err := c.RegisterExternalDomain(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseRegisterExternalDomainResponse(rsp)
}

// DeleteExternalDomainWithResponse request returning *DeleteExternalDomainResponse
func (c *ClientWithResponses) DeleteExternalDomainWithResponse(ctx context.Context, domain string) (*DeleteExternalDomainResponse, error) {
	rsp, err := c.DeleteExternalDomain(ctx, domain)
	if err != nil {
		return nil, err
	}
	return ParseDeleteExternalDomainResponse(rsp)
}

// TransferDomainWithBodyWithResponse request with arbitrary body returning *TransferDomainResponse
func (c *ClientWithResponses) TransferDomainWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*TransferDomainResponse, error) {
	rsp, err := c.TransferDomainWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseTransferDomainResponse(rsp)
}

func (c *ClientWithResponses) TransferDomainWithResponse(ctx context.Context, body TransferDomainJSONRequestBody) (*TransferDomainResponse, error) {
	rsp, err := c.TransferDomain(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseTransferDomainResponse(rsp)
}

// GetDomainWithResponse request returning *GetDomainResponse
func (c *ClientWithResponses) GetDomainWithResponse(ctx context.Context, domain string) (*GetDomainResponse, error) {
	rsp, err := c.GetDomain(ctx, domain)
	if err != nil {
		return nil, err
	}
	return ParseGetDomainResponse(rsp)
}

// UpdateDomainWithBodyWithResponse request with arbitrary body returning *UpdateDomainResponse
func (c *ClientWithResponses) UpdateDomainWithBodyWithResponse(ctx context.Context, domain string, contentType string, body io.Reader) (*UpdateDomainResponse, error) {
	rsp, err := c.UpdateDomainWithBody(ctx, domain, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateDomainResponse(rsp)
}

func (c *ClientWithResponses) UpdateDomainWithResponse(ctx context.Context, domain string, body UpdateDomainJSONRequestBody) (*UpdateDomainResponse, error) {
	rsp, err := c.UpdateDomain(ctx, domain, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateDomainResponse(rsp)
}

// GetDomainAuthCodeWithResponse request returning *GetDomainAuthCodeResponse
func (c *ClientWithResponses) GetDomainAuthCodeWithResponse(ctx context.Context, domain string) (*GetDomainAuthCodeResponse, error) {
	rsp, err := c.GetDomainAuthCode(ctx, domain)
	if err != nil {
		return nil, err
	}
	return ParseGetDomainAuthCodeResponse(rsp)
}

// DisableDomainAutoRenewWithBodyWithResponse request with arbitrary body returning *DisableDomainAutoRenewResponse
func (c *ClientWithResponses) DisableDomainAutoRenewWithBodyWithResponse(ctx context.Context, domain string, contentType string, body io.Reader) (*DisableDomainAutoRenewResponse, error) {
	rsp, err := c.DisableDomainAutoRenewWithBody(ctx, domain, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseDisableDomainAutoRenewResponse(rsp)
}

func (c *ClientWithResponses) DisableDomainAutoRenewWithResponse(ctx context.Context, domain string, body DisableDomainAutoRenewJSONRequestBody) (*DisableDomainAutoRenewResponse, error) {
	rsp, err := c.DisableDomainAutoRenew(ctx, domain, body)
	if err != nil {
		return nil, err
	}
	return ParseDisableDomainAutoRenewResponse(rsp)
}

// DisableDomainDNSSECWithBodyWithResponse request with arbitrary body returning *DisableDomainDNSSECResponse
func (c *ClientWithResponses) DisableDomainDNSSECWithBodyWithResponse(ctx context.Context, domain string, contentType string, body io.Reader) (*DisableDomainDNSSECResponse, error) {
	rsp, err := c.DisableDomainDNSSECWithBody(ctx, domain, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseDisableDomainDNSSECResponse(rsp)
}

func (c *ClientWithResponses) DisableDomainDNSSECWithResponse(ctx context.Context, domain string, body DisableDomainDNSSECJSONRequestBody) (*DisableDomainDNSSECResponse, error) {
	rsp, err := c.DisableDomainDNSSEC(ctx, domain, body)
	if err != nil {
		return nil, err
	}
	return ParseDisableDomainDNSSECResponse(rsp)
}

// EnableDomainAutoRenewWithBodyWithResponse request with arbitrary body returning *EnableDomainAutoRenewResponse
func (c *ClientWithResponses) EnableDomainAutoRenewWithBodyWithResponse(ctx context.Context, domain string, contentType string, body io.Reader) (*EnableDomainAutoRenewResponse, error) {
	rsp, err := c.EnableDomainAutoRenewWithBody(ctx, domain, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseEnableDomainAutoRenewResponse(rsp)
}

func (c *ClientWithResponses) EnableDomainAutoRenewWithResponse(ctx context.Context, domain string, body EnableDomainAutoRenewJSONRequestBody) (*EnableDomainAutoRenewResponse, error) {
	rsp, err := c.EnableDomainAutoRenew(ctx, domain, body)
	if err != nil {
		return nil, err
	}
	return ParseEnableDomainAutoRenewResponse(rsp)
}

// EnableDomainDNSSECWithBodyWithResponse request with arbitrary body returning *EnableDomainDNSSECResponse
func (c *ClientWithResponses) EnableDomainDNSSECWithBodyWithResponse(ctx context.Context, domain string, contentType string, body io.Reader) (*EnableDomainDNSSECResponse, error) {
	rsp, err := c.EnableDomainDNSSECWithBody(ctx, domain, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseEnableDomainDNSSECResponse(rsp)
}

func (c *ClientWithResponses) EnableDomainDNSSECWithResponse(ctx context.Context, domain string, body EnableDomainDNSSECJSONRequestBody) (*EnableDomainDNSSECResponse, error) {
	rsp, err := c.EnableDomainDNSSEC(ctx, domain, body)
	if err != nil {
		return nil, err
	}
	return ParseEnableDomainDNSSECResponse(rsp)
}

// LockDomainTransferWithBodyWithResponse request with arbitrary body returning *LockDomainTransferResponse
func (c *ClientWithResponses) LockDomainTransferWithBodyWithResponse(ctx context.Context, domain string, contentType string, body io.Reader) (*LockDomainTransferResponse, error) {
	rsp, err := c.LockDomainTransferWithBody(ctx, domain, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseLockDomainTransferResponse(rsp)
}

func (c *ClientWithResponses) LockDomainTransferWithResponse(ctx context.Context, domain string, body LockDomainTransferJSONRequestBody) (*LockDomainTransferResponse, error) {
	rsp, err := c.LockDomainTransfer(ctx, domain, body)
	if err != nil {
		return nil, err
	}
	return ParseLockDomainTransferResponse(rsp)
}

// RenewDomainWithBodyWithResponse request with arbitrary body returning *RenewDomainResponse
func (c *ClientWithResponses) RenewDomainWithBodyWithResponse(ctx context.Context, domain string, contentType string, body io.Reader) (*RenewDomainResponse, error) {
	rsp, err := c.RenewDomainWithBody(ctx, domain, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseRenewDomainResponse(rsp)
}

func (c *ClientWithResponses) RenewDomainWithResponse(ctx context.Context, domain string, body RenewDomainJSONRequestBody) (*RenewDomainResponse, error) {
	rsp, err := c.RenewDomain(ctx, domain, body)
	if err != nil {
		return nil, err
	}
	return ParseRenewDomainResponse(rsp)
}

// TradeDomainWithBodyWithResponse request with arbitrary body returning *TradeDomainResponse
func (c *ClientWithResponses) TradeDomainWithBodyWithResponse(ctx context.Context, domain string, contentType string, body io.Reader) (*TradeDomainResponse, error) {
	rsp, err := c.TradeDomainWithBody(ctx, domain, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseTradeDomainResponse(rsp)
}

func (c *ClientWithResponses) TradeDomainWithResponse(ctx context.Context, domain string, body TradeDomainJSONRequestBody) (*TradeDomainResponse, error) {
	rsp, err := c.TradeDomain(ctx, domain, body)
	if err != nil {
		return nil, err
	}
	return ParseTradeDomainResponse(rsp)
}

// UnlockDomainTransferWithBodyWithResponse request with arbitrary body returning *UnlockDomainTransferResponse
func (c *ClientWithResponses) UnlockDomainTransferWithBodyWithResponse(ctx context.Context, domain string, contentType string, body io.Reader) (*UnlockDomainTransferResponse, error) {
	rsp, err := c.UnlockDomainTransferWithBody(ctx, domain, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseUnlockDomainTransferResponse(rsp)
}

func (c *ClientWithResponses) UnlockDomainTransferWithResponse(ctx context.Context, domain string, body UnlockDomainTransferJSONRequestBody) (*UnlockDomainTransferResponse, error) {
	rsp, err := c.UnlockDomainTransfer(ctx, domain, body)
	if err != nil {
		return nil, err
	}
	return ParseUnlockDomainTransferResponse(rsp)
}

// ListSSLCertificatesWithResponse request returning *ListSSLCertificatesResponse
func (c *ClientWithResponses) ListSSLCertificatesWithResponse(ctx context.Context, params *ListSSLCertificatesParams) (*ListSSLCertificatesResponse, error) {
	rsp, err := c.ListSSLCertificates(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseListSSLCertificatesResponse(rsp)
}

// CreateSSLCertificateWithBodyWithResponse request with arbitrary body returning *CreateSSLCertificateResponse
func (c *ClientWithResponses) CreateSSLCertificateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateSSLCertificateResponse, error) {
	rsp, err := c.CreateSSLCertificateWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateSSLCertificateResponse(rsp)
}

func (c *ClientWithResponses) CreateSSLCertificateWithResponse(ctx context.Context, body CreateSSLCertificateJSONRequestBody) (*CreateSSLCertificateResponse, error) {
	rsp, err := c.CreateSSLCertificate(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateSSLCertificateResponse(rsp)
}

// DeleteSSLCertificateWithResponse request returning *DeleteSSLCertificateResponse
func (c *ClientWithResponses) DeleteSSLCertificateWithResponse(ctx context.Context, dnsZone string) (*DeleteSSLCertificateResponse, error) {
	rsp, err := c.DeleteSSLCertificate(ctx, dnsZone)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSSLCertificateResponse(rsp)
}

// ListTasksWithResponse request returning *ListTasksResponse
func (c *ClientWithResponses) ListTasksWithResponse(ctx context.Context, params *ListTasksParams) (*ListTasksResponse, error) {
	rsp, err := c.ListTasks(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseListTasksResponse(rsp)
}

// ParseListContactsResponse parses an HTTP response from a ListContactsWithResponse call
func ParseListContactsResponse(rsp *http.Response) (*ListContactsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListContactsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScalewayDomainV2alpha2ListContactsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetContactResponse parses an HTTP response from a GetContactWithResponse call
func ParseGetContactResponse(rsp *http.Response) (*GetContactResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetContactResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScalewayDomainV2alpha2Contact
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateContactResponse parses an HTTP response from a UpdateContactWithResponse call
func ParseUpdateContactResponse(rsp *http.Response) (*UpdateContactResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateContactResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScalewayDomainV2alpha2Contact
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListDNSZonesResponse parses an HTTP response from a ListDNSZonesWithResponse call
func ParseListDNSZonesResponse(rsp *http.Response) (*ListDNSZonesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListDNSZonesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScalewayDomainV2alpha2ListDNSZonesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateDNSZoneResponse parses an HTTP response from a CreateDNSZoneWithResponse call
func ParseCreateDNSZoneResponse(rsp *http.Response) (*CreateDNSZoneResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateDNSZoneResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScalewayDomainV2alpha2DNSZone
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteDNSZoneResponse parses an HTTP response from a DeleteDNSZoneWithResponse call
func ParseDeleteDNSZoneResponse(rsp *http.Response) (*DeleteDNSZoneResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteDNSZoneResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScalewayDomainV2alpha2DeleteDNSZoneResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateDNSZoneResponse parses an HTTP response from a UpdateDNSZoneWithResponse call
func ParseUpdateDNSZoneResponse(rsp *http.Response) (*UpdateDNSZoneResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateDNSZoneResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScalewayDomainV2alpha2DNSZone
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCopyDNSZoneResponse parses an HTTP response from a CopyDNSZoneWithResponse call
func ParseCopyDNSZoneResponse(rsp *http.Response) (*CopyDNSZoneResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CopyDNSZoneResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScalewayDomainV2alpha2DNSZone
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseImportProviderDNSZoneResponse parses an HTTP response from a ImportProviderDNSZoneWithResponse call
func ParseImportProviderDNSZoneResponse(rsp *http.Response) (*ImportProviderDNSZoneResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ImportProviderDNSZoneResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScalewayDomainV2alpha2ImportProviderDNSZoneResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListDNSZoneNameserversResponse parses an HTTP response from a ListDNSZoneNameserversWithResponse call
func ParseListDNSZoneNameserversResponse(rsp *http.Response) (*ListDNSZoneNameserversResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListDNSZoneNameserversResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScalewayDomainV2alpha2ListDNSZoneNameserversResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateDNSZoneNameserversResponse parses an HTTP response from a UpdateDNSZoneNameserversWithResponse call
func ParseUpdateDNSZoneNameserversResponse(rsp *http.Response) (*UpdateDNSZoneNameserversResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateDNSZoneNameserversResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScalewayDomainV2alpha2UpdateDNSZoneNameserversResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExportRawDNSZoneResponse parses an HTTP response from a ExportRawDNSZoneWithResponse call
func ParseExportRawDNSZoneResponse(rsp *http.Response) (*ExportRawDNSZoneResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ExportRawDNSZoneResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScalewayStdFile
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseImportRawDNSZoneResponse parses an HTTP response from a ImportRawDNSZoneWithResponse call
func ParseImportRawDNSZoneResponse(rsp *http.Response) (*ImportRawDNSZoneResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ImportRawDNSZoneResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScalewayDomainV2alpha2ImportRawDNSZoneResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseClearDNSZoneRecordsResponse parses an HTTP response from a ClearDNSZoneRecordsWithResponse call
func ParseClearDNSZoneRecordsResponse(rsp *http.Response) (*ClearDNSZoneRecordsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ClearDNSZoneRecordsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScalewayDomainV2alpha2ClearDNSZoneRecordsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListDNSZoneRecordsResponse parses an HTTP response from a ListDNSZoneRecordsWithResponse call
func ParseListDNSZoneRecordsResponse(rsp *http.Response) (*ListDNSZoneRecordsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListDNSZoneRecordsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScalewayDomainV2alpha2ListDNSZoneRecordsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateDNSZoneRecordsResponse parses an HTTP response from a UpdateDNSZoneRecordsWithResponse call
func ParseUpdateDNSZoneRecordsResponse(rsp *http.Response) (*UpdateDNSZoneRecordsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateDNSZoneRecordsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScalewayDomainV2alpha2UpdateDNSZoneRecordsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRefreshDNSZoneResponse parses an HTTP response from a RefreshDNSZoneWithResponse call
func ParseRefreshDNSZoneResponse(rsp *http.Response) (*RefreshDNSZoneResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &RefreshDNSZoneResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScalewayDomainV2alpha2RefreshDNSZoneResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetDNSZoneTsigKeyResponse parses an HTTP response from a GetDNSZoneTsigKeyWithResponse call
func ParseGetDNSZoneTsigKeyResponse(rsp *http.Response) (*GetDNSZoneTsigKeyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetDNSZoneTsigKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScalewayDomainV2alpha2GetDNSZoneTsigKeyResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteDNSZoneTsigKeyResponse parses an HTTP response from a DeleteDNSZoneTsigKeyWithResponse call
func ParseDeleteDNSZoneTsigKeyResponse(rsp *http.Response) (*DeleteDNSZoneTsigKeyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteDNSZoneTsigKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseListDNSZoneVersionsResponse parses an HTTP response from a ListDNSZoneVersionsWithResponse call
func ParseListDNSZoneVersionsResponse(rsp *http.Response) (*ListDNSZoneVersionsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListDNSZoneVersionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScalewayDomainV2alpha2ListDNSZoneVersionsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetDNSZoneVersionDiffResponse parses an HTTP response from a GetDNSZoneVersionDiffWithResponse call
func ParseGetDNSZoneVersionDiffResponse(rsp *http.Response) (*GetDNSZoneVersionDiffResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetDNSZoneVersionDiffResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScalewayDomainV2alpha2GetDNSZoneVersionDiffResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListDNSZoneVersionRecordsResponse parses an HTTP response from a ListDNSZoneVersionRecordsWithResponse call
func ParseListDNSZoneVersionRecordsResponse(rsp *http.Response) (*ListDNSZoneVersionRecordsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListDNSZoneVersionRecordsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScalewayDomainV2alpha2ListDNSZoneVersionRecordsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRestoreDNSZoneVersionResponse parses an HTTP response from a RestoreDNSZoneVersionWithResponse call
func ParseRestoreDNSZoneVersionResponse(rsp *http.Response) (*RestoreDNSZoneVersionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &RestoreDNSZoneVersionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScalewayDomainV2alpha2RestoreDNSZoneVersionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListDomainsResponse parses an HTTP response from a ListDomainsWithResponse call
func ParseListDomainsResponse(rsp *http.Response) (*ListDomainsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListDomainsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScalewayDomainV2alpha2ListDomainsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBuyDomainResponse parses an HTTP response from a BuyDomainWithResponse call
func ParseBuyDomainResponse(rsp *http.Response) (*BuyDomainResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &BuyDomainResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScalewayDomainV2alpha2Domain
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRegisterExternalDomainResponse parses an HTTP response from a RegisterExternalDomainWithResponse call
func ParseRegisterExternalDomainResponse(rsp *http.Response) (*RegisterExternalDomainResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &RegisterExternalDomainResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScalewayDomainV2alpha2RegisterExternalDomainResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteExternalDomainResponse parses an HTTP response from a DeleteExternalDomainWithResponse call
func ParseDeleteExternalDomainResponse(rsp *http.Response) (*DeleteExternalDomainResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteExternalDomainResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScalewayDomainV2alpha2DeleteExternalDomainResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTransferDomainResponse parses an HTTP response from a TransferDomainWithResponse call
func ParseTransferDomainResponse(rsp *http.Response) (*TransferDomainResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &TransferDomainResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScalewayDomainV2alpha2Domain
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetDomainResponse parses an HTTP response from a GetDomainWithResponse call
func ParseGetDomainResponse(rsp *http.Response) (*GetDomainResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetDomainResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScalewayDomainV2alpha2GetDomainResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateDomainResponse parses an HTTP response from a UpdateDomainWithResponse call
func ParseUpdateDomainResponse(rsp *http.Response) (*UpdateDomainResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateDomainResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScalewayDomainV2alpha2Domain
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetDomainAuthCodeResponse parses an HTTP response from a GetDomainAuthCodeWithResponse call
func ParseGetDomainAuthCodeResponse(rsp *http.Response) (*GetDomainAuthCodeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetDomainAuthCodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScalewayDomainV2alpha2GetDomainAuthCodeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDisableDomainAutoRenewResponse parses an HTTP response from a DisableDomainAutoRenewWithResponse call
func ParseDisableDomainAutoRenewResponse(rsp *http.Response) (*DisableDomainAutoRenewResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DisableDomainAutoRenewResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScalewayDomainV2alpha2Domain
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDisableDomainDNSSECResponse parses an HTTP response from a DisableDomainDNSSECWithResponse call
func ParseDisableDomainDNSSECResponse(rsp *http.Response) (*DisableDomainDNSSECResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DisableDomainDNSSECResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScalewayDomainV2alpha2Domain
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEnableDomainAutoRenewResponse parses an HTTP response from a EnableDomainAutoRenewWithResponse call
func ParseEnableDomainAutoRenewResponse(rsp *http.Response) (*EnableDomainAutoRenewResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &EnableDomainAutoRenewResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScalewayDomainV2alpha2Domain
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEnableDomainDNSSECResponse parses an HTTP response from a EnableDomainDNSSECWithResponse call
func ParseEnableDomainDNSSECResponse(rsp *http.Response) (*EnableDomainDNSSECResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &EnableDomainDNSSECResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScalewayDomainV2alpha2Domain
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseLockDomainTransferResponse parses an HTTP response from a LockDomainTransferWithResponse call
func ParseLockDomainTransferResponse(rsp *http.Response) (*LockDomainTransferResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &LockDomainTransferResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScalewayDomainV2alpha2Domain
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRenewDomainResponse parses an HTTP response from a RenewDomainWithResponse call
func ParseRenewDomainResponse(rsp *http.Response) (*RenewDomainResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &RenewDomainResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScalewayDomainV2alpha2Domain
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTradeDomainResponse parses an HTTP response from a TradeDomainWithResponse call
func ParseTradeDomainResponse(rsp *http.Response) (*TradeDomainResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &TradeDomainResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScalewayDomainV2alpha2Domain
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUnlockDomainTransferResponse parses an HTTP response from a UnlockDomainTransferWithResponse call
func ParseUnlockDomainTransferResponse(rsp *http.Response) (*UnlockDomainTransferResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UnlockDomainTransferResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScalewayDomainV2alpha2Domain
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListSSLCertificatesResponse parses an HTTP response from a ListSSLCertificatesWithResponse call
func ParseListSSLCertificatesResponse(rsp *http.Response) (*ListSSLCertificatesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListSSLCertificatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScalewayDomainV2alpha2ListSSLCertificatesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateSSLCertificateResponse parses an HTTP response from a CreateSSLCertificateWithResponse call
func ParseCreateSSLCertificateResponse(rsp *http.Response) (*CreateSSLCertificateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateSSLCertificateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScalewayDomainV2alpha2ZoneSSL
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteSSLCertificateResponse parses an HTTP response from a DeleteSSLCertificateWithResponse call
func ParseDeleteSSLCertificateResponse(rsp *http.Response) (*DeleteSSLCertificateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteSSLCertificateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScalewayDomainV2alpha2DeleteSSLCertificateResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListTasksResponse parses an HTTP response from a ListTasksWithResponse call
func ParseListTasksResponse(rsp *http.Response) (*ListTasksResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListTasksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScalewayDomainV2alpha2ListTasksResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

